{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "What is Panther?"}, {"role": "assistant", "content": "Panther is a fast, async web framework for building APIs with Python 3.10+. It features a file-based database (PantherDB), MongoDB support, built-in authentication, permissions, OpenAPI docs, WebSocket support, background tasks, middleware, and more. Panther is designed for simplicity, speed, and developer productivity."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I install Panther?"}, {"role": "assistant", "content": "You can install Panther using pip:\n```bash\npip install panther\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "What is the recommended project structure for a Panther app?"}, {"role": "assistant", "content": "A typical Panther project structure looks like this:\n```.\n├── app\n│   ├── apis.py\n│   ├── models.py\n│   ├── serializers.py\n│   └── urls.py\n└── core\n    ├── configs.py\n    └── urls.py\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I create a CRUD API for a Book model in Panther?"}, {"role": "assistant", "content": "1. Define the model in app/models.py:\n```python\nfrom panther.db import Model\n\nclass Book(Model):\n    name: str\n    author: str\n    pages_count: int\n```\n2. Create a serializer in app/serializers.py:\n```python\nfrom panther.serializer import ModelSerializer\nfrom app.models import Book\n\nclass BookSerializer(ModelSerializer):\n    class Config:\n        model = Book\n        fields = ['name', 'author', 'pages_count']\n```\n3. Define API endpoints in app/apis.py (example for function-based):\n```python\nfrom panther.app import API\nfrom panther.request import Request\nfrom panther.response import Response\nfrom app.models import Book\nfrom app.serializers import BookSerializer\n\n@API(input_model=BookSerializer, methods=['POST', 'GET'])\nasync def book_api(request: Request):\n    if request.method == 'POST':\n        body = request.validated_data\n        book = await Book.insert_one(**body.model_dump())\n        return Response(data=book)\n    elif request.method == 'GET':\n        books = await Book.find()\n        return Response(data=books)\n```\n4. Add URLs in app/urls.py:\n```python\nfrom app.apis import book_api\nurls = {\n    'book/': book_api,\n}\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I enable authentication in Panther APIs?"}, {"role": "assistant", "content": "Set the auth parameter to an authentication class or function in your API definition. Panther will use this to validate the request. Example:\n```python\nfrom panther.app import API\nfrom panther.authentications import JWTAuthentication\n@API(auth=JWTAuthentication)\nasync def user_api(request):\n    ...\n```\nIn your configs, set:\n```python\nAUTHENTICATION = 'panther.authentications.JWTAuthentication'\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "What does the auth attribute do in Panther APIs?"}, {"role": "assistant", "content": "The auth parameter can be any async function or a class with an async __call__ method. If you set auth, Panther will use your specified authentication class or function. If you do not set auth, Panther will use the default AUTHENTICATION from your config only if the request contains an authorization header. If there is no authorization header, authentication is bypassed, request.user will be None and you must rely on permissions to check the user and their authorization."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I access the authenticated user in a Panther API?"}, {"role": "assistant", "content": "After successful authentication, the authenticated user is available as request.user in your API function or method. This will be an instance of your USER_MODEL (default: BaseUser) or None if authentication was bypassed."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "What happens if authentication fails in Panther?"}, {"role": "assistant", "content": "If authentication fails, Panther automatically raises HTTP_401_UNAUTHORIZED and returns a 401 Unauthorized response to the client. You do not need to handle authentication errors manually."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "Can I use a custom authentication class with the auth attribute?"}, {"role": "assistant", "content": "Yes, you can pass a custom authentication class or function to the auth attribute. This will override the default AUTHENTICATION from your configs for that specific API. Example:\n```python\n@API(auth=CustomAuthentication)\nasync def my_api(request):\n    ...\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "What built-in authentication types does Panther support?"}, {"role": "assistant", "content": "Panther provides three built-in authentication classes, all based on JWT (JSON Web Token):\n1. JWTAuthentication: Reads the token from the 'Authorization' header as 'Bearer <token>'.\n2. QueryParamJWTAuthentication: Reads the token from the 'authorization' query parameter (useful for WebSockets).\n3. CookieJWTAuthentication: Reads the token from the 'access_token' cookie.\nYou can set the authentication class in your configs with the AUTHENTICATION variable."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I configure JWT settings in Panther?"}, {"role": "assistant", "content": "You can customize JWT behavior by setting the JWT_CONFIG variable in your configs. Example:\n```python\nfrom datetime import timedelta\nJWT_CONFIG = {\n    'key': SECRET_KEY,\n    'algorithm': 'HS256',\n    'life_time': timedelta(days=2),\n    'refresh_life_time': timedelta(days=10),\n}\n```\nThis controls the secret key, algorithm, access token lifetime, and refresh token lifetime."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I implement custom authentication in Panther?"}, {"role": "assistant", "content": "To implement custom authentication, create a class inheriting from panther.authentications.BaseAuthentication and implement the async __call__ method. Return a user instance or raise AuthenticationAPIError on failure. Example:\n```python\nfrom panther.authentications import BaseAuthentication\nclass CustomAuthentication(BaseAuthentication):\n    async def __call__(self, request):\n        # Your logic here\n        return user\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "What happens if I don't set auth in a Panther API?"}, {"role": "assistant", "content": "If you don't set auth, Panther will use the default AUTHENTICATION from your configs only if the request contains an authorization header. If there is no authorization header, authentication is bypassed, request.user will be None, and you must rely on permissions to check user authorization."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I define a model in Panther?"}, {"role": "assistant", "content": "To define a model, inherit from panther.db.Model and use type hints for fields. Example:\n```python\nfrom panther.db import Model\nclass User(Model):\n    username: str\n    age: int\n    is_active: bool\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "What field types does Panther support in models?"}, {"role": "assistant", "content": "Panther supports various field types including:\n- Basic types: str, int, float, bool\n- Complex types: list, dict, tuple\n- Date/time: datetime, date, time\n- Optional fields: type | None\n\nExample:\n```python\nfrom panther.db import Model\nfrom datetime import datetime\nclass Product(Model):\n    name: str\n    price: float\n    is_available: bool\n    created_at: datetime\n    tags: list[str]\n    description: str | str\n    metadata: dict\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I create nested models in Panther?"}, {"role": "assistant", "content": "Use Pydantic BaseModel for nested fields or another Panther model. Example:\n```python\nfrom panther.db import Model\nfrom pydantic import BaseModel\n\nclass Address(BaseModel):\n    street: str\n    city: str\n    zipcode: str\n    country: str\n\nclass User(Model):\n    username: str\n    email: str\n    address: Address  # Nested model\n    phone_numbers: list[str]\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I handle foreign keys in Panther models?"}, {"role": "assistant", "content": "Use another Panther model as a field type for foreign keys. Panther will handle the relationship. Example:\n```python\nfrom panther.db import Model\n\nclass Department(Model):\n    name: str\n    description: str\n\nclass Employee(Model):\n    name: str\n    email: str\n    department: Department  # Foreign key relationship\n    manager: Employee  # Self-referencing foreign key\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I create one-to-many relationships in Panther?"}, {"role": "assistant", "content": "Use a list of the related model for one-to-many relationships. Example:\n```python\nfrom panther.db import Model\n\nclass Author(Model):\n    name: str\n    email: str\n    books: list['Book']  # One author can have many books\n\nclass Book(Model):\n    title: str\n    author: Author  # Many books can belong to one author\n    isbn: str\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I create many-to-many relationships in Panther?"}, {"role": "assistant", "content": "Use lists on both sides of the relationship for many-to-many. Example:\n```python\nfrom panther.db import Model\n\nclass Student(Model):\n    name: str\n    courses: list['Course']  # Many students can take many courses\n\nclass Course(Model):\n    name: str\n    students: list[Student]  # Many courses can have many students\n    instructor: str\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I add validation to model fields in Panther?"}, {"role": "assistant", "content": "Use Pydantic Field with validation rules. Example:\n```python\nfrom panther.db import Model\nfrom pydantic import Field, EmailStr\n\nclass User(Model):\n    username: str = Field(min_length=3, max_length=50, regex=r'^[a-zA-Z0-9_]+$')\n    email: EmailStr\n    age: int = Field(ge=0, le=150)\n    password: str = Field(min_length=8)\n    bio: str | None = Field(max_length=500, default=None)\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I set default values in Panther models?"}, {"role": "assistant", "content": "Use default values in field definitions or Pydantic Field. Example:\n```python\nfrom panther.db import Model\nfrom panther.utils import timezone_now\nfrom pydantic import Field\nfrom datetime import datetime\n\nclass Post(Model):\n    title: str\n    content: str\n    is_published: bool = False  # Default value\n    created_at: datetime = Field(default_factory=timezone_now)\n    tags: list[str] = Field(default_factory=list)\n    views: int = 0\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I create computed fields in Panther models?"}, {"role": "assistant", "content": "Use Pydantic computed fields with @property or @field_validator. Example:\n```python\nfrom panther.db import Model\nfrom pydantic import computed_field, field_validator\nfrom datetime import datetime\n\nclass Order(Model):\n    items: list[dict]\n    tax_rate: float = 0.1\n    \n    @computed_field\n    def total_amount(self) -> float:\n        subtotal = sum(item['price'] * item['quantity'] for item in self.items)\n        return subtotal * (1 + self.tax_rate)\n    \n    @field_validator('items')\n    def validate_items(cls, v):\n        if not v:\n            raise ValueError('Order must have at least one item')\n        return v\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I handle model inheritance in Panther?"}, {"role": "assistant", "content": "You can inherit from other Panther models to create base classes. Example:\n```python\nfrom panther.db import Model\nfrom panther.utils import timezone_now\nfrom datetime import datetime\n\nclass BaseModel(Model):\n    created_at: datetime = Field(default_factory=timezone_now)\n    updated_at: datetime = Field(default_factory=timezone_now)\n    is_active: bool = True\n\nclass User(BaseModel):\n    username: str\n    email: str\n\nclass Product(BaseModel):\n    name: str\n    price: float\n    category: str\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I create complex nested structures in Panther models?"}, {"role": "assistant", "content": "Combine nested models, lists, and dictionaries for complex structures. Example:\n```python\nfrom panther.db import Model\nfrom pydantic import BaseModel\n\nclass Address(BaseModel):\n    street: str\n    city: str\n    country: str\n\nclass ContactInfo(BaseModel):\n    phone: str\n    email: str\n    website: str | None\n\nclass Company(Model):\n    name: str\n    address: Address\n    contacts: ContactInfo\n    departments: list[dict[str, str]]\n    employees: list['Employee']\n    metadata: dict[str, any]\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I handle model serialization in Panther?"}, {"role": "assistant", "content": "Panther models are automatically serializable. Use model_dump() for dictionaries and model_dump_json() for JSON. Example:\n```python\nfrom panther.db import Model\n\nclass User(Model):\n    username: str\n    email: str\n    profile: dict\n\n# Serialization\nuser = User(username='john', email='john@example.com', profile={'age': 25})\nuser_dict = user.model_dump()\nuser_json = user.model_dump_json()\n\n# Deserialization\nuser_from_dict = User(**user_dict)\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I create model methods in Panther?"}, {"role": "assistant", "content": "Add methods to your model classes for business logic. Example:\n```python\nfrom panther.db import Model\nfrom datetime import datetime, timedelta\n\nclass User(Model):\n    username: str\n    email: str\n    last_login: datetime\n    is_active: bool = True\n    \n    def is_recently_active(self, days: int = 7) -> bool:\n        return self.last_login > datetime.now() - timedelta(days=days)\n    \n    def get_display_name(self) -> str:\n        return f'{self.username} ({self.email})'\n    \n    async def update_last_login(self):\n        self.last_login = datetime.now()\n        await self.save()\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I handle model validation errors in Panther?"}, {"role": "assistant", "content": "Use try-catch blocks to handle validation errors. Example:\n```python\nfrom panther.db import Model\nfrom pydantic import ValidationError\n\nclass User(Model):\n    username: str = Field(min_length=3)\n    email: str = Field(regex=r'^[^@]+@[^@]+\\.[^@]+$')\n    age: int = Field(ge=0, le=150)\n\n# Handle validation\nasync def create_user(user_data: dict):\n    try:\n        user = User(**user_data)\n        await user.save()\n        return user\n    except ValidationError as e:\n        print(f'Validation error: {e.errors()}')\n        raise\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "What is the best practice for designing models in Panther?"}, {"role": "assistant", "content": "Use descriptive field names. Keep models focused and single-purpose. Use proper type hints. Handle validation with Pydantic Field. Use forward references for circular dependencies. Create base models for common fields. Keep nested structures manageable. Document complex relationships. Use computed fields for derived data. Handle errors gracefully."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I use serializers in Panther?"}, {"role": "assistant", "content": "Serializers transform data between your models and API requests/responses. Inherit from ModelSerializer and set the Config.model and fields. Example:\n```python\nfrom panther.serializer import ModelSerializer\nfrom app.models import User\nclass UserSerializer(ModelSerializer):\n    class Config:\n        model = User\n        fields = ['username', 'age', 'is_active']\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I create a WebSocket endpoint in Panther?"}, {"role": "assistant", "content": "Inherit from GenericWebsocket and implement connect and receive methods. Register the class in your urls. Example:\n```python\nfrom panther.websocket import GenericWebsocket\nclass EchoWebsocket(GenericWebsocket):\n    async def connect(self):\n        await self.accept()\n    async def receive(self, data):\n        await self.send(data)\nurls = {\n    'ws/echo/': EchoWebsocket,\n}\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I implement custom permissions in Panther APIs?"}, {"role": "assistant", "content": "Create a class inheriting from panther.permissions.BasePermission and implement async classmethod authorization. Add your permission to the permissions list in your API. Example:\n```python\nfrom panther.permissions import BasePermission\nclass CustomPermission(BasePermission):\n    @classmethod\n    async def authorization(cls, request):\n        return request.user.is_admin\nfrom panther.app import API\n@API(permissions=[CustomPermission])\nasync def admin_api(request):\n    ...\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I document my Panther APIs with OpenAPI?"}, {"role": "assistant", "content": "Use the output_schema attribute with panther.openapi.OutputSchema in your API. Example:\n```python\nfrom panther import status\nfrom panther.app import API\nfrom panther.openapi import OutputSchema\nfrom app.serializers import UserSerializer\n@API(output_schema=OutputSchema(model=UserSerializer, status_code=status.HTTP_200_OK))\nasync def user_api():\n    ...\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I use middleware in Panther?"}, {"role": "assistant", "content": "To use global middleware, add them to the MIDDLEWARES list in your configs. For per-API middleware, set the middlewares attribute on your API class or use the middlewares argument in the @API decorator."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I use background tasks in Panther?"}, {"role": "assistant", "content": "1. Set BACKGROUND_TASKS = True in your configs.\n2. Use BackgroundTask to schedule tasks:\n```python\nfrom panther.background_tasks import BackgroundTask\ndef do_something(name):\n    print(f'Hello {name}')\nBackgroundTask(do_something, name='Ali').submit()\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How does caching work in Panther APIs?"}, {"role": "assistant", "content": "Caching in Panther allows you to store API responses for GET requests for a specified duration. Set the cache attribute to a timedelta value on your API. Panther will cache the response based on user or IP, request path, query parameters, and validated data."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I enable caching in Panther APIs?"}, {"role": "assistant", "content": "Set the cache attribute to a timedelta value on your API. Panther will cache GET responses for the specified duration. Example:\n```python\nfrom datetime import timedelta\nfrom panther.app import API\n@API(cache=timedelta(minutes=10))\nasync def my_api():\n    ...\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How is the cache key built in Panther?"}, {"role": "assistant", "content": "The cache key in Panther is built from the user ID or IP, request path, a hash of the query parameters, and validated data. This ensures that cached responses are unique per user (or IP) and request parameters."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "Can I cache non-GET requests in Panther?"}, {"role": "assistant", "content": "No, Panther only caches GET requests. POST, PUT, PATCH, and DELETE requests are not cached as they modify data and should always return fresh responses."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I clear the cache in Panther?"}, {"role": "assistant", "content": "Panther automatically manages cache expiration based on the timedelta you set. You can also manually clear the cache by restarting your application or using Panther's cache management utilities if available."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "What is the best practice for using cache in Panther?"}, {"role": "assistant", "content": "Use caching for GET endpoints that return data that doesn't change frequently to improve performance. Set appropriate cache durations based on how often your data changes. Be careful not to cache sensitive or user-specific data inappropriately."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How does caching work with authentication in Panther?"}, {"role": "assistant", "content": "When caching is enabled, Panther includes the user ID in the cache key if the user is authenticated, or the IP address if not authenticated. This ensures that cached responses are user-specific and secure."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "Can I disable caching for specific APIs in Panther?"}, {"role": "assistant", "content": "Yes, you can disable caching for specific APIs by setting cache=None or not setting the cache attribute at all. This will override any global cache settings for that specific API."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How does caching affect API performance in Panther?"}, {"role": "assistant", "content": "Caching significantly improves API performance by serving cached responses instead of executing the full request logic. This reduces database queries, computation time, and response latency, especially for frequently accessed data."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How does throttling work in Panther APIs?"}, {"role": "assistant", "content": "Throttling in Panther limits the number of requests a user or IP can make in a given time period. Set the throttling attribute on your API to an instance of panther.throttling.Throttle. If the rate is exceeded, Panther returns a 429 Too Many Requests error."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I enable throttling in Panther?"}, {"role": "assistant", "content": "Set the throttling attribute on your API to an instance of panther.throttling.Throttle. Example:\n```python\nfrom datetime import timedelta\nfrom panther.app import API\nfrom panther.throttling import Throttle\n@API(throttling=Throttle(rate=5, duration=timedelta(minutes=1)))\nasync def my_api():\n    ...\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I set global throttling in Panther?"}, {"role": "assistant", "content": "Set the THROTTLING variable in your configs to a Throttle instance. This will apply to all APIs unless overridden by a per-API throttling setting. Example:\n```python\nfrom datetime import timedelta\nfrom panther.throttling import Throttle\nTHROTTLING = Throttle(rate=10, duration=timedelta(minutes=1))\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How does Panther handle requests that exceed the throttle limit?"}, {"role": "assistant", "content": "If a user exceeds the allowed number of requests within the throttle duration, Panther returns a 429 Too Many Requests response and bans the user for the duration."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "Can I customize how throttling keys are built in Panther?"}, {"role": "assistant", "content": "Yes, you can customize throttling behavior by subclassing panther.throttling.Throttle and overriding the build_cache_key method. Example:\n```python\nfrom panther.throttling import Throttle\nclass CustomThrottle(Throttle):\n    def build_cache_key(self, request):\n        # Custom logic here\n        return ...\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "What is the best practice for using throttling in Panther?"}, {"role": "assistant", "content": "Use throttling to protect your APIs from abuse. Set appropriate rates and durations for your use case. Consider using different throttling rules for different types of endpoints (e.g., stricter limits for authentication endpoints)."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do throttling and caching work together in Panther?"}, {"role": "assistant", "content": "Throttling and caching are independent features. Throttling checks happen before caching, so even if a response is cached, the request still counts toward the throttle limit. This prevents abuse even for cached endpoints."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "Can I use different throttling rules for different HTTP methods?"}, {"role": "assistant", "content": "Yes, you can set different throttling rules for different HTTP methods by creating separate API endpoints or using custom throttling logic in your build_cache_key method to include the HTTP method in the cache key."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How does throttling work with authentication in Panther?"}, {"role": "assistant", "content": "Throttling can be based on user ID (if authenticated) or IP address (if not authenticated). When a user is authenticated, throttling is typically per-user. When not authenticated, it's per-IP address to prevent abuse."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "What happens if I don't set any throttling in Panther?"}, {"role": "assistant", "content": "If you don't set any throttling (neither global nor per-API), there are no rate limits on your APIs. This means users can make unlimited requests, which could lead to abuse or performance issues in production."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I enable and use the admin panel in Panther?"}, {"role": "assistant", "content": "1. Add the admin panel URLs in your main URL config:\n```python\nfrom panther.panel.urls import url_routing as panel_url_routing\nurl_routing = {\n    'panel/': panel_url_routing,\n}\n```\n2. Start your app and visit http://127.0.0.1:8000/panel/ in your browser."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How does the CORS middleware work in Panther?"}, {"role": "assistant", "content": "The CORS middleware in Panther automatically adds Cross-Origin Resource Sharing (CORS) headers to HTTP responses based on your configuration. It handles preflight (OPTIONS) requests and sets headers like Access-Control-Allow-Origin, Access-Control-Allow-Methods, and others."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I enable CORS in Panther?"}, {"role": "assistant", "content": "1. Set CORS config variables in your configs, e.g. ALLOW_ORIGINS, ALLOW_METHODS, etc.\n2. Add 'panther.middlewares.cors.CORSMiddleware' to your MIDDLEWARES list.\nExample:\n```python\nALLOW_ORIGINS = ['*']\nMIDDLEWARES = [\n    'panther.middlewares.cors.CORSMiddleware',\n]\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "What CORS configuration options does Panther support?"}, {"role": "assistant", "content": "Panther supports several CORS configuration options:\n- ALLOW_ORIGINS: List of allowed origins (e.g., ['https://example.com'])\n- ALLOW_METHODS: List of allowed HTTP methods (e.g., ['GET', 'POST'])\n- ALLOW_HEADERS: List of allowed headers (e.g., ['Content-Type', 'Authorization'])\n- ALLOW_CREDENTIALS: Boolean for allowing credentials\n- EXPOSE_HEADERS: List of headers to expose\n- CORS_MAX_AGE: Integer for preflight cache duration"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I configure specific CORS settings in Panther?"}, {"role": "assistant", "content": "Set the CORS configuration variables in your configs. Example:\n```python\nALLOW_ORIGINS = ['https://example.com', 'https://app.example.com']\nALLOW_METHODS = ['GET', 'POST', 'PUT', 'DELETE']\nALLOW_HEADERS = ['Content-Type', 'Authorization', 'X-Custom-Header']\nALLOW_CREDENTIALS = True\nEXPOSE_HEADERS = ['X-Custom-Header']\nCORS_MAX_AGE = 3600\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "What is the difference between ALLOW_ORIGINS=['*'] and specific origins?"}, {"role": "assistant", "content": "ALLOW_ORIGINS=['*'] allows requests from any origin, which is convenient for development but not recommended for production. Specific origins (e.g., ['https://example.com']) are more secure as they only allow requests from trusted domains."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I handle preflight requests with CORS in Panther?"}, {"role": "assistant", "content": "The CORS middleware automatically handles preflight (OPTIONS) requests. When a browser sends a preflight request, the middleware responds with the appropriate CORS headers based on your configuration. You don't need to handle OPTIONS requests manually."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "Can I use CORS with credentials in Panther?"}, {"role": "assistant", "content": "Yes, you can enable credentials by setting ALLOW_CREDENTIALS = True in your configs. However, when using credentials, you cannot use ALLOW_ORIGINS = ['*'] - you must specify specific origins for security reasons."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "What is the best practice for CORS configuration in Panther?"}, {"role": "assistant", "content": "For development, you can use ALLOW_ORIGINS = ['*'] for convenience. For production, always specify exact origins, enable only necessary methods and headers, and set appropriate CORS_MAX_AGE. Consider security implications when allowing credentials."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I debug CORS issues in Panther?"}, {"role": "assistant", "content": "To debug CORS issues, check your browser's developer console for CORS error messages. Verify that your ALLOW_ORIGINS includes the correct origin, that ALLOW_METHODS includes the HTTP method being used, and that the CORS middleware is properly added to your MIDDLEWARES list."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "Can I apply CORS only to specific APIs in Panther?"}, {"role": "assistant", "content": "The CORS middleware applies globally when added to MIDDLEWARES. If you need different CORS settings for different APIs, you would need to create custom middleware or handle CORS headers manually in those specific endpoints."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I log database query performance in Panther?"}, {"role": "assistant", "content": "Set 'LOG_QUERIES = True' in your configs. Panther will log query execution times to 'logs/query.log'. Example:\n```python\nLOG_QUERIES = True\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I use environment variables in Panther configs?"}, {"role": "assistant", "content": "You can use Panther's 'load_env' utility to load variables from a .env file. Example:\n```python\nfrom panther.utils import load_env\nfrom pathlib import Path\nBASE_DIR = Path(__name__).resolve().parent\nenv = load_env(BASE_DIR / '.env')\nSECRET_KEY = env['SECRET_KEY']\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I define a model with nested fields or foreign keys in Panther?"}, {"role": "assistant", "content": "You can use pydantic.BaseModel for nested fields or another Panther model for foreign keys. Example:\n```python\nfrom panther.db import Model\nfrom pydantic import BaseModel\nclass Address(BaseModel):\n    city: str\n    zipcode: str\nclass User(Model):\n    username: str\n    address: Address\nclass Department(Model):\n    name: str\nclass Employee(Model):\n    name: str\n    department: Department\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "What OpenAPI UI types does Panther support?"}, {"role": "assistant", "content": "Panther supports several OpenAPI UI types out of the box. You can use ScalarOpenAPI, SwaggerOpenAPI, RedocOpenAPI, RapiDocOpenAPI, and SpotlightOpenAPI. Import them from panther.openapi.views and register them in your URL routing. Example:\n```python\nfrom panther.openapi.views import ScalarOpenAPI, SwaggerOpenAPI, RedocOpenAPI\nurl_routing = {\n    'docs/scalar/': ScalarOpenAPI,\n    'docs/swagger/': SwaggerOpenAPI,\n    'docs/redoc/': RedocOpenAPI,\n}\n```\nYou can also use the bundled openapi_url_routing to include all UI types at once:\n```python\nfrom panther.openapi.urls import url_routing as openapi_url_routing\nurl_routing = {\n    'docs/': openapi_url_routing,\n}\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How does Panther determine response models and status codes for OpenAPI docs?"}, {"role": "assistant", "content": "Panther follows a specific logic to generate OpenAPI documentation:\n1. output_schema: Panther first looks for an output_schema attribute to generate the OpenAPI documentation. This is the recommended and most accurate way.\n2. output_model: If output_schema does not exist, Panther looks for an output_model attribute to generate the response type and attempts to extract the status code from your source code.\n3. Source Code Analysis: If neither is available, Panther tries to extract the response data and status code directly from your source code using static analysis with ast.\nFor best results, always specify output_schema in your APIs."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I add pagination, filtering, and sorting to a Panther List API?"}, {"role": "assistant", "content": "Inherit from ListAPI and set the pagination, search_fields, filter_fields, and sort_fields attributes. Example:\n```python\nfrom panther.generics import ListAPI\nfrom panther.pagination import Pagination\nclass BookAPI(ListAPI):\n    pagination = Pagination\n    search_fields = ['name', 'author']\n    filter_fields = ['name', 'author']\n    sort_fields = ['name', 'pages_count']\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How does Panther handle error responses?"}, {"role": "assistant", "content": "Panther raises exceptions like AuthenticationAPIError, AuthorizationAPIError, and NotFoundAPIError for common error cases. You can raise these in your code to return standard error responses. Example:\n```python\nfrom panther.exceptions import NotFoundAPIError\nif not user:\n    raise NotFoundAPIError('User not found')\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I deploy a Panther app?"}, {"role": "assistant", "content": "You can deploy Panther using any ASGI server such as Uvicorn, Granian, or Daphne. For production, use Gunicorn with Uvicorn workers:\n```bash\ngunicorn -w 4 -k uvicorn.workers.UvicornWorker main:app\n```\nMake sure to set up environment variables and production configs as needed."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I use OpenAPI output_schema for best documentation?"}, {"role": "assistant", "content": "Always set the output_schema attribute on your APIs using panther.openapi.OutputSchema. This ensures Panther generates accurate OpenAPI documentation for your endpoints, including the correct response model and status code."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I handle custom error responses in Panther?"}, {"role": "assistant", "content": "Raise panther.exceptions.APIError or create your own exception class inheriting from APIError. Example:\n```python\nfrom panther.exceptions import APIError\nraise APIError('Custom error message', status_code=418)\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "What does the input_model attribute do in Panther APIs?"}, {"role": "assistant", "content": "The input_model attribute specifies a serializer class (Pydantic or ModelSerializer) that validates and parses incoming request data. For POST, PUT, and PATCH requests, Panther validates request.data using this serializer and provides the validated data as request.validated_data. Example:\n```python\nfrom panther.app import API\nfrom app.serializers import BookSerializer\n@API(input_model=BookSerializer)\nasync def create_book(request):\n    data = request.validated_data\n    ...\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How does Panther validate input data with input_model?"}, {"role": "assistant", "content": "When you set input_model, Panther uses the specified serializer to validate incoming data for POST, PUT, and PATCH requests. If the data is invalid, Panther returns a 400 Bad Request with details about the validation errors. If valid, the parsed data is available as request.validated_data."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "What types of serializers can I use for input_model in Panther?"}, {"role": "assistant", "content": "You can use either a Pydantic model or a Panther ModelSerializer for input_model. ModelSerializer is recommended for models that map directly to your database, while Pydantic models are useful for custom validation or non-database data."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "Can I use input_model for GET requests?"}, {"role": "assistant", "content": "No, input_model is only used for validating data in POST, PUT, and PATCH requests. For GET requests, Panther does not validate request.data using input_model."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "What happens if input data does not match the input_model in Panther?"}, {"role": "assistant", "content": "If the incoming data does not match the input_model's schema or fails validation, Panther automatically returns a 400 Bad Request response with details about the validation errors. You do not need to handle this manually."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I access validated input data in a Panther API?"}, {"role": "assistant", "content": "After Panther validates the request data using input_model, the validated and parsed data is available as request.validated_data in your API function or method."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "What does the output_schema attribute do in Panther APIs?"}, {"role": "assistant", "content": "The output_schema attribute is used for OpenAPI documentation. It should be an instance of panther.openapi.OutputSchema, specifying both the response model and status code. This helps Panther generate accurate OpenAPI docs. Example:\n```python\nfrom panther import status\nfrom panther.app import API\nfrom panther.openapi import OutputSchema\nfrom app.serializers import BookSerializer\n@API(output_schema=OutputSchema(model=BookSerializer, status_code=status.HTTP_201_CREATED))\nasync def create_book():\n    ...\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How does output_schema improve OpenAPI documentation in Panther?"}, {"role": "assistant", "content": "By setting output_schema, you explicitly define the response model and status code for your API in the OpenAPI docs. This ensures the generated documentation is accurate and matches your API's actual behavior."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "What is the difference between output_model and output_schema in Panther?"}, {"role": "assistant", "content": "output_model only specifies the serializer for the response data, while output_schema specifies both the serializer (model) and the HTTP status code for OpenAPI documentation. For best documentation, use output_schema."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "Is it required to use output_schema in Panther APIs?"}, {"role": "assistant", "content": "No, output_schema is optional, but it is recommended for APIs where you want precise OpenAPI documentation, especially for public APIs or when you need to specify custom status codes."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "Can I use output_schema to document multiple response types in Panther?"}, {"role": "assistant", "content": "Currently, output_schema documents a single response model and status code per API. For more complex cases (e.g., multiple possible responses), you may need to extend the OpenAPI docs manually."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "What happens if I set both output_model and output_schema in Panther?"}, {"role": "assistant", "content": "If both are set, Panther uses output_schema for OpenAPI documentation and output_model for response serialization. However, for best results, keep them consistent (use the same serializer/model in both)."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "What does the output_model attribute do in Panther APIs?"}, {"role": "assistant", "content": "The output_model attribute specifies a serializer class to automatically serialize your API response data. When set, Panther uses this serializer to format the response, ensuring a consistent and validated output structure. Example:\n```python\nfrom panther.app import API\nfrom app.serializers import BookSerializer\n@API(output_model=BookSerializer)\nasync def get_book():\n    ...\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How does Panther use output_model to serialize responses?"}, {"role": "assistant", "content": "When output_model is set, Panther serializes the data returned by your API using the specified serializer before sending it in the HTTP response. This ensures the response matches the expected schema and is validated."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "What types of serializers can I use for output_model in Panther?"}, {"role": "assistant", "content": "You can use either a Pydantic model or a Panther ModelSerializer for output_model. ModelSerializer is recommended for serializing database models, while Pydantic models are useful for custom or computed responses."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How does output_model affect OpenAPI documentation in Panther?"}, {"role": "assistant", "content": "When you set output_model, Panther uses it to generate the response schema in the OpenAPI documentation. For best results, use output_schema for full control over both the model and status code."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "Is it required to use output_model in Panther APIs?"}, {"role": "assistant", "content": "No, output_model is optional. However, using it is recommended for consistent, validated, and well-documented API responses, especially for public APIs or when using OpenAPI docs."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "What happens if the response data does not match the output_model in Panther?"}, {"role": "assistant", "content": "If the response data does not match the output_model's schema, Panther will raise a validation error and return a 500 Internal Server Error. Always ensure your API returns data compatible with the output_model."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do permissions work in Panther APIs?"}, {"role": "assistant", "content": "Permissions in Panther allow you to control access to APIs and WebSockets based on custom logic. You define permission classes that implement an async __call__ method. Panther checks each permission before allowing access. If any permission returns False, a 403 Forbidden error is raised."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I define a custom permission class in Panther?"}, {"role": "assistant", "content": "Create a class that inherits from panther.permissions.BasePermission and implement the async __call__ method. This method receives the request (or WebSocket) and should return True or False. Example:\n```python\nfrom panther.permissions import BasePermission\nclass IsAdmin(BasePermission):\n    async def __call__(self, request):\n        return getattr(request.user, 'is_admin', False)\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I use permissions in a Panther API?"}, {"role": "assistant", "content": "Set the permissions attribute (class-based) or argument (function-based) to a list of permission classes. Panther will check all listed permissions before allowing access. Example:\n```python\nfrom panther.app import API\n@API(permissions=[IsAdmin])\nasync def admin_api(request):\n    ...\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I use permissions in Panther WebSockets?"}, {"role": "assistant", "content": "Set the permissions attribute on your GenericWebsocket subclass to a list of permission classes. Panther will check these before accepting the connection. Example:\n```python\nclass MyWebSocket(GenericWebsocket):\n    permissions = [IsAdmin]\n    async def connect(self):\n        await self.accept()\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "What should the permission __call__ method return in Panther?"}, {"role": "assistant", "content": "The __call__ method should return True if access is allowed, or False to deny access. If any permission returns False, Panther raises a 403 Forbidden error."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "Can I use multiple permission classes in Panther?"}, {"role": "assistant", "content": "Yes, you can provide a list of permission classes. Panther will call the __call__ method of each class. All must return True for access to be granted."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "What happens if a permission check fails in Panther?"}, {"role": "assistant", "content": "If any permission's __call__ method returns False, Panther raises a panther.exceptions.AuthorizationAPIError and returns a 403 Forbidden response to the client."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "What is the best practice for writing permission classes in Panther?"}, {"role": "assistant", "content": "Keep your permission logic simple and focused. Use one class per rule, and combine them as needed in your APIs. Always make the __call__ method async and return True or False."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "Can I use async functions as permissions in Panther?"}, {"role": "assistant", "content": "Yes, you can use any async function or class with an async __call__ method as a permission. Panther will call each permission asynchronously. Example:\n```python\nasync def custom_permission(request):\n    return request.user.is_active\n@API(permissions=[custom_permission])\nasync def my_api(request):\n    ...\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do permissions interact with authentication in Panther?"}, {"role": "assistant", "content": "Permissions are checked after authentication. If authentication is bypassed (no auth set or no authorization header), request.user will be None, and you must handle this case in your permission logic. Always check if request.user exists before accessing user attributes."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do middlewares work in Panther?"}, {"role": "assistant", "content": "Middlewares in Panther are functions or classes that process requests and responses. They run in sequence before and after your API endpoints. You can use global middlewares (applied to all APIs) or per-API middlewares (applied to specific endpoints)."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I use global middlewares in Panther?"}, {"role": "assistant", "content": "To use global middlewares, add them to the MIDDLEWARES list in your configs. These middlewares will run for all APIs in your application. Example:\n```python\nMIDDLEWARES = [\n    'core.middlewares.MyMiddleware',\n    'panther.middlewares.cors.CORSMiddleware',\n]\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I use per-API middlewares in Panther?"}, {"role": "assistant", "content": "You can assign middlewares to specific APIs using the middlewares attribute (class-based) or argument (function-based). These middlewares run only for the specified API, after global middlewares. Example:\n```python\nfrom panther.app import API\n@API(middlewares=[CustomMiddleware])\nasync def my_api(request):\n    ...\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I create a custom middleware in Panther?"}, {"role": "assistant", "content": "Create a class that inherits from panther.middlewares.HTTPMiddleware and implement the __call__ method. This method should process the request and call self.dispatch to continue the middleware chain. Example:\n```python\nfrom panther.middlewares import HTTPMiddleware\nclass CustomMiddleware(HTTPMiddleware):\n    async def __call__(self, request):\n        # Process request\n        response = await self.dispatch(request=request)\n        # Process response\n        return response\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "What is the middleware execution order in Panther?"}, {"role": "assistant", "content": "Middlewares execute in the order they are defined. Global middlewares run first, followed by per-API middlewares. Within each group, middlewares execute in the order they appear in the list. The response flows back through the middlewares in reverse order."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "What built-in middlewares does Panther provide?"}, {"role": "assistant", "content": "Panther provides several built-in middlewares including CORSMiddleware for handling Cross-Origin Resource Sharing, and other utility middlewares. You can import them from panther.middlewares and use them in your MIDDLEWARES list or per-API."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "Can I use async functions as middlewares in Panther?"}, {"role": "assistant", "content": "Yes, you can use async functions as middlewares. The function should accept a request parameter and return a response. Example:\n```python\nasync def custom_middleware(request):\n    # Process request\n    response = await dispatch_request(request)\n    # Process response\n    return response\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I handle errors in Panther middlewares?"}, {"role": "assistant", "content": "You can catch exceptions in your middleware and handle them appropriately. If you want to stop the middleware chain, you can return a response directly. Otherwise, let the exception propagate to be handled by Panther's error handling system."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "What is the best practice for writing middlewares in Panther?"}, {"role": "assistant", "content": "Keep middlewares focused on a single responsibility. Use global middlewares for cross-cutting concerns like logging, CORS, or authentication. Use per-API middlewares for specific endpoint requirements. Always call self.dispatch to continue the middleware chain unless you want to short-circuit the request."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do middlewares interact with authentication and permissions in Panther?"}, {"role": "assistant", "content": "Middlewares run before authentication and permissions checks. This means you can use middlewares to modify the request before authentication, or to add custom headers that might be needed for authentication. However, user information (request.user) is not available in middlewares that run before authentication."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "What types of APIs does Panther support?"}, {"role": "assistant", "content": "Panther supports several types of APIs:\n1. Function-based APIs using the @API decorator\n2. Class-based APIs inheriting from GenericAPI\n3. Generic APIs (ListAPI, CreateAPI, etc.) for common CRUD operations\n4. Each type has different use cases and capabilities."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I create a function-based API in Panther?"}, {"role": "assistant", "content": "Use the @API decorator on an async function. You can specify methods, input_model, output_model, auth, permissions, and other attributes. Example:\n```python\nfrom panther.app import API\n@API(methods=['GET', 'POST'])\nasync def my_api(request):\n    if request.method == 'GET':\n        return {'data': 'Hello'}\n    elif request.method == 'POST':\n        return {'data': 'Created'}\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I create a class-based API in Panther?"}, {"role": "assistant", "content": "Inherit from GenericAPI and implement methods like get, post, put, patch, delete. Each method corresponds to an HTTP method. Example:\n```python\nfrom panther.app import GenericAPI\nclass UserAPI(GenericAPI):\n    async def get(self, request):\n        return {'users': []}\n    async def post(self, request):\n        return {'message': 'User created'}\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "What is the difference between function-based and class-based APIs in Panther?"}, {"role": "assistant", "content": "Function-based APIs use a single function with request.method checks, while class-based APIs use separate methods (get, post, etc.) for each HTTP method. Class-based APIs are more organized and easier to maintain for complex endpoints with multiple HTTP methods."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I use ListAPI in Panther?"}, {"role": "assistant", "content": "Inherit from ListAPI to create an API that handles GET requests with pagination, filtering, and sorting. Set attributes like pagination, search_fields, filter_fields, and sort_fields. Example:\n```python\nfrom panther.generics import ListAPI\nfrom panther.pagination import Pagination\nclass BookListAPI(ListAPI):\n    pagination = Pagination\n    search_fields = ['name', 'author']\n    filter_fields = ['name', 'author']\n    sort_fields = ['name', 'pages_count']\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "What are Generic APIs in Panther?"}, {"role": "assistant", "content": "Generic APIs are pre-built classes that provide common CRUD functionality. They include ListAPI (for listing with pagination), CreateAPI (for creating), RetrieveAPI (for single item retrieval), UpdateAPI (for updating), and DeleteAPI (for deleting). These reduce boilerplate code."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "When should I use function-based vs class-based APIs in Panther?"}, {"role": "assistant", "content": "Use function-based APIs for simple endpoints with one or two HTTP methods. Use class-based APIs for complex endpoints with multiple HTTP methods or when you need better organization. Use Generic APIs when you need standard CRUD operations with built-in features like pagination and filtering."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "Can I mix different API types in the same project?"}, {"role": "assistant", "content": "Yes, you can mix function-based, class-based, and Generic APIs in the same project. Each API type is independent, and you can choose the most appropriate type for each endpoint based on your requirements."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I handle different HTTP methods in function-based APIs?"}, {"role": "assistant", "content": "Use request.method to check the HTTP method and handle each case. You can also use the methods parameter in the @API decorator to restrict which methods are allowed. Example:\n```python\n@API(methods=['GET', 'POST'])\nasync def my_api(request):\n    match request.method:\n        case 'GET':\n            return {'data': 'get'}\n        case 'POST':\n            return {'data': 'post'}\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "What are the advantages of using Generic APIs in Panther?"}, {"role": "assistant", "content": "Generic APIs provide built-in functionality like pagination, filtering, searching, and sorting without writing boilerplate code. They follow REST conventions and provide consistent behavior across your application. They're especially useful for standard CRUD operations."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do WebSockets work in Panther?"}, {"role": "assistant", "content": "WebSockets in Panther provide real-time bidirectional communication between clients and servers. They allow persistent connections where both client and server can send messages at any time. Panther's WebSocket implementation is built on top of ASGI and supports authentication, permissions, and custom message handling."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I create a WebSocket endpoint in Panther?"}, {"role": "assistant", "content": "Inherit from GenericWebsocket and implement the required methods. Register the class in your urls. Example:\n```python\nfrom panther.websocket import GenericWebsocket\nclass EchoWebsocket(GenericWebsocket):\n    async def connect(self):\n        await self.accept()\n    async def receive(self, data):\n        await self.send(data)\nurls = {\n    'ws/echo/': EchoWebsocket,\n}\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "What methods can I implement in a Panther WebSocket?"}, {"role": "assistant", "content": "You can implement these methods in your WebSocket class:\n- connect(): Called when a client connects\n- disconnect(): Called when a client disconnects\n- receive(data): Called when a message is received from the client\n- send(data): Send a message to the client\n- close(): Close the connection\n- accept(): Accept the WebSocket connection"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I handle WebSocket authentication in Panther?"}, {"role": "assistant", "content": "Set the auth attribute on your WebSocket class to an authentication class. Panther will authenticate the connection before calling connect(). Example:\n```python\nfrom panther.websocket import GenericWebsocket\nfrom panther.authentications import JWTAuthentication\nclass ChatWebsocket(GenericWebsocket):\n    auth = JWTAuthentication\n    async def connect(self):\n        # self.user is available after authentication\n        await self.accept()\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I use permissions with WebSockets in Panther?"}, {"role": "assistant", "content": "Set the permissions attribute on your WebSocket class to a list of permission classes. Panther will check these before accepting the connection. Example:\n```python\nfrom panther.websocket import GenericWebsocket\nclass AdminWebsocket(GenericWebsocket):\n    permissions = [IsAdmin]\n    async def connect(self):\n        await self.accept()\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I send messages to WebSocket clients in Panther?"}, {"role": "assistant", "content": "Use the send() method to send messages to the connected client. You can send strings, dictionaries, or other serializable data. Example:\n```python\nasync def receive(self, data):\n    # Echo the message back\n    await self.send(data)\n    # Send a custom message\n    await self.send({'type': 'notification', 'message': 'Hello!'})\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I handle different message types in Panther WebSockets?"}, {"role": "assistant", "content": "You can check the message type in the receive() method and handle different types accordingly. Example:\n```python\nasync def receive(self, data):\n    if isinstance(data, dict):\n        message_type = data.get('type')\n        if message_type == 'chat':\n            await self.handle_chat(data)\n        elif message_type == 'join':\n            await self.handle_join(data)\n    else:\n        await self.send({'error': 'Invalid message format'})\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I broadcast messages to multiple WebSocket clients in Panther?"}, {"role": "assistant", "content": "You can maintain a list of connected clients and broadcast to all of them. Example:\n```python\nclass ChatWebsocket(GenericWebsocket):\n    connected_clients = []\n    async def connect(self):\n        await self.accept()\n        self.connected_clients.append(self)\n    async def disconnect(self):\n        self.connected_clients.remove(self)\n    async def broadcast(self, message):\n        for client in self.connected_clients:\n            await client.send(message)\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I handle WebSocket errors in Panther?"}, {"role": "assistant", "content": "You can catch exceptions in your WebSocket methods and handle them appropriately. Use try-catch blocks and send error messages to clients. Example:\n```python\nasync def receive(self, data):\n    try:\n        await self.process_message(data)\n    except Exception as e:\n        await self.send({'error': str(e)})\n        await self.close()\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I close a WebSocket connection in Panther?"}, {"role": "assistant", "content": "Use the close() method to close the WebSocket connection. You can also specify a close code and reason. Example:\n```python\nasync def disconnect(self):\n    # Connection is automatically closed\n    pass\nasync def force_disconnect(self):\n    await self.close(code=1000, reason='User requested disconnect')\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I access WebSocket connection information in Panther?"}, {"role": "assistant", "content": "You can access connection information through the WebSocket object. Example:\n```python\nasync def connect(self):\n    # Get client IP\n    client_ip = self.scope.get('client')[0]\n    # Get headers\n    headers = dict(self.scope.get('headers', []))\n    # Get query parameters\n    query_params = self.scope.get('query_string', b'').decode()\n    await self.accept()\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I implement a chat room with Panther WebSockets?"}, {"role": "assistant", "content": "Create a WebSocket that maintains a list of connected clients and broadcasts messages. Example:\n```python\nclass ChatRoom(GenericWebsocket):\n    connected_clients = []\n    async def connect(self):\n        await self.accept()\n        self.connected_clients.append(self)\n        await self.broadcast({'type': 'join', 'user': self.user.username})\n    async def disconnect(self):\n        self.connected_clients.remove(self)\n        await self.broadcast({'type': 'leave', 'user': self.user.username})\n    async def receive(self, data):\n        await self.broadcast({'type': 'message', 'user': self.user.username, 'message': data})\n    async def broadcast(self, message):\n        for client in self.connected_clients:\n            await client.send(message)\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I handle WebSocket reconnection in Panther?"}, {"role": "assistant", "content": "Clients can reconnect by establishing a new WebSocket connection. You can implement reconnection logic by maintaining user sessions and allowing reconnection with the same authentication token. The connect() method will be called again for each new connection."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I implement WebSocket rate limiting in Panther?"}, {"role": "assistant", "content": "You can implement rate limiting by tracking message frequency per client and limiting the number of messages sent within a time period. Example:\n```python\nimport time\nclass RateLimitedWebsocket(GenericWebsocket):\n    message_times = {}\n    async def receive(self, data):\n        client_id = self.user.id\n        current_time = time.time()\n        if client_id in self.message_times:\n            if current_time - self.message_times[client_id] < 1:  # 1 second limit\n                await self.send({'error': 'Rate limit exceeded'})\n                return\n        self.message_times[client_id] = current_time\n        await self.send(data)\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I test WebSocket endpoints in Panther?"}, {"role": "assistant", "content": "You can test WebSocket endpoints using tools like wscat, browser WebSocket APIs, or Python libraries like websockets. Example with wscat:\n```bash\nwscat -c ws://localhost:8000/ws/echo/\n```\nOr with Python:\n```python\nimport asyncio\nimport websockets\nasync def test_websocket():\n    async with websockets.connect('ws://localhost:8000/ws/echo/') as websocket:\n        await websocket.send('Hello')\n        response = await websocket.recv()\n        print(response)\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "What is the best practice for WebSocket error handling in Panther?"}, {"role": "assistant", "content": "Always wrap WebSocket operations in try-catch blocks. Send meaningful error messages to clients. Log errors for debugging. Handle connection drops gracefully. Use appropriate close codes when closing connections. Example:\n```python\nasync def receive(self, data):\n    try:\n        await self.process_message(data)\n    except ValueError as e:\n        await self.send({'error': 'Invalid data format'})\n    except Exception as e:\n        await self.send({'error': 'Internal server error'})\n        await self.close(code=1011)\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do WebSockets work with Panther's authentication system?"}, {"role": "assistant", "content": "WebSockets can use the same authentication classes as regular APIs. Set the auth attribute on your WebSocket class. After successful authentication, self.user will contain the authenticated user. If authentication fails, the connection will be rejected before connect() is called."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "Can I use WebSockets with Panther's caching system?"}, {"role": "assistant", "content": "WebSockets don't use Panther's caching system since they maintain persistent connections and send real-time data. Caching is designed for HTTP requests, while WebSockets are for live, bidirectional communication."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I implement WebSocket rooms or channels in Panther?"}, {"role": "assistant", "content": "You can implement rooms by maintaining a dictionary of room members and broadcasting messages only to clients in specific rooms. Example:\n```python\nclass RoomWebsocket(GenericWebsocket):\n    rooms = {}\n    async def connect(self):\n        await self.accept()\n        room_id = self.scope.get('url_route', {}).get('kwargs', {}).get('room_id')\n        if room_id not in self.rooms:\n            self.rooms[room_id] = []\n        self.rooms[room_id].append(self)\n    async def receive(self, data):\n        room_id = self.scope.get('url_route', {}).get('kwargs', {}).get('room_id')\n        for client in self.rooms[room_id]:\n            await client.send(data)\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How does routing work in Panther?"}, {"role": "assistant", "content": "Routing in Panther maps URL patterns to API endpoints or WebSocket classes. Panther uses a simple dictionary-based routing system where keys are URL patterns and values are API functions or WebSocket classes. Routes are matched in order, and the first match is used."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I define basic routes in Panther?"}, {"role": "assistant", "content": "Create a urls.py file and define a urls dictionary with URL patterns as keys and API functions or WebSocket classes as values. Example:\n```python\nfrom app.apis import user_api, book_api\nfrom app.websockets import ChatWebsocket\nurls = {\n    'user/': user_api,\n    'book/': book_api,\n    'ws/chat/': ChatWebsocket,\n}\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I create nested routes in Panther?"}, {"role": "assistant", "content": "You can create nested routes by defining a urls dictionary within another urls dictionary. Example:\n```python\nfrom app.apis import user_api, user_detail_api\nfrom app.apis import book_api, book_detail_api\nurls = {\n    'user/': {\n        '': user_api,\n        '<id>/': user_detail_api,\n    },\n    'book/': {\n        '': book_api,\n        '<id>/': book_detail_api,\n    },\n}\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I use URL parameters in Panther routes?"}, {"role": "assistant", "content": "Use angle brackets to define URL parameters. The parameter name will be available in your API function. Example:\n```python\nfrom app.apis import user_detail_api\nurls = {\n    'user/<id>/': user_detail_api,\n}\n# In your API function:\nasync def user_detail_api(request, id):\n    # id parameter is available here\n    return {'user_id': id}\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I handle multiple URL parameters in Panther?"}, {"role": "assistant", "content": "You can define multiple parameters in the URL pattern. They will be passed to your API function in the order they appear. Example:\n```python\nfrom app.apis import book_chapter_api\nurls = {\n    'book/<book_id>/chapter/<chapter_id>/': book_chapter_api,\n}\n# In your API function:\nasync def book_chapter_api(request, book_id, chapter_id):\n    return {'book_id': book_id, 'chapter_id': chapter_id}\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I include routes from other modules in Panther?"}, {"role": "assistant", "content": "Import the urls dictionary from other modules and include it in your main urls dictionary. Example:\n```python\nfrom app.apis import user_urls, book_urls\nfrom app.websockets import websocket_urls\nurls = {\n    'api/': {\n        'user/': user_urls,\n        'book/': book_urls,\n    },\n    'ws/': websocket_urls,\n}\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I set up the main URL configuration in Panther?"}, {"role": "assistant", "content": "Create a main.py file and import your urls dictionary. Panther will automatically use this for routing. Example:\n```python\nfrom panther import Panther\nfrom app.urls import urls\napp = Panther(__name__)\napp.include_urls(urls)\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I handle trailing slashes in Panther routes?"}, {"role": "assistant", "content": "Panther automatically handles trailing slashes. You can define routes with or without trailing slashes, and Panther will match both. However, it's recommended to be consistent and use trailing slashes for clarity."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I create API versioning in Panther routes?"}, {"role": "assistant", "content": "You can create API versioning by organizing routes with version prefixes. Example:\n```python\nfrom app.apis.v1 import user_api as user_api_v1\nfrom app.apis.v2 import user_api as user_api_v2\nurls = {\n    'api/v1/': {\n        'user/': user_api_v1,\n    },\n    'api/v2/': {\n        'user/': user_api_v2,\n    },\n}\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I handle 404 errors for unmatched routes in Panther?"}, {"role": "assistant", "content": "Panther automatically returns a 404 Not Found response when no route matches the requested URL. You don't need to handle this manually. Panther will also return a 405 Method Not Allowed if the route exists but doesn't support the HTTP method."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I organize routes in a large Panther application?"}, {"role": "assistant", "content": "For large applications, organize routes by feature or module. Create separate urls.py files for each module and include them in the main urls dictionary. Example:\n```python\n# app/urls.py\nfrom app.apis.user import urls as user_urls\nfrom app.apis.book import urls as book_urls\nfrom app.apis.order import urls as order_urls\nurls = {\n    'user/': user_urls,\n    'book/': book_urls,\n    'order/': order_urls,\n}\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I use regex patterns in Panther routes?"}, {"role": "assistant", "content": "Panther uses simple string matching for routes, not regex patterns. Use URL parameters with angle brackets for dynamic parts of the URL. If you need complex pattern matching, handle it in your API function logic."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I create optional URL parameters in Panther?"}, {"role": "assistant", "content": "Panther doesn't support optional URL parameters in the route definition. You can handle optional parameters by creating multiple routes or by using query parameters instead. Example:\n```python\n# Use query parameters for optional data\nurls = {\n    'user/<id>/': user_detail_api,\n}\n# In your API: request.query_params.get('include_details')\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I handle route conflicts in Panther?"}, {"role": "assistant", "content": "Routes are matched in the order they are defined in the urls dictionary. More specific routes should be defined before more general ones. Panther will use the first matching route it finds."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I create a catch-all route in Panther?"}, {"role": "assistant", "content": "You can create a catch-all route by using a very general pattern at the end of your urls dictionary. Example:\n```python\nfrom app.apis import not_found_api\nurls = {\n    'user/': user_api,\n    'book/': book_api,\n    '': not_found_api,  # Catch-all route\n}\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I debug routing issues in Panther?"}, {"role": "assistant", "content": "To debug routing issues, check the order of your routes (more specific first), verify URL patterns match exactly, ensure API functions are properly imported, and check that URL parameters are correctly defined. Panther will log routing information in debug mode."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I create RESTful routes in Panther?"}, {"role": "assistant", "content": "Create RESTful routes by organizing URLs hierarchically and using appropriate HTTP methods. Example:\n```python\nfrom app.apis import UserListAPI, UserDetailAPI\nurls = {\n    'users/': UserListAPI,      # GET /users/, POST /users/\n    'users/<id>/': UserDetailAPI,  # GET /users/1/, PUT /users/1/, DELETE /users/1/\n}\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I handle route middleware in Panther?"}, {"role": "assistant", "content": "Middleware in Panther is applied globally or per-API, not per-route. If you need different middleware for different route groups, you can apply middleware to the specific API functions or use global middleware with conditional logic."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I create route aliases in Panther?"}, {"role": "assistant", "content": "You can create route aliases by defining multiple URL patterns that point to the same API function. Example:\n```python\nfrom app.apis import user_api\nurls = {\n    'user/': user_api,\n    'users/': user_api,  # Alias\n    'u/': user_api,      # Short alias\n}\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I handle route caching in Panther?"}, {"role": "assistant", "content": "Route caching is handled automatically by Panther. The routing table is compiled once at startup and cached for performance. You don't need to manage route caching manually."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "What is the best practice for organizing Panther routes?"}, {"role": "assistant", "content": "Organize routes by feature or domain. Use consistent naming conventions. Group related endpoints together. Use versioning for API evolution. Keep route patterns simple and RESTful. Document your route structure for team collaboration."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "What are path variables in Panther?"}, {"role": "assistant", "content": "Path variables in Panther are dynamic parts of URLs that capture values from the URL path and pass them to your API functions as parameters. They are defined using angle brackets (<variable_name>) in route patterns and allow you to create dynamic, parameterized endpoints."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I define path variables in Panther routes?"}, {"role": "assistant", "content": "Use angle brackets with a variable name in your route pattern. The variable name will be passed as a parameter to your API function. Example:\n```python\nfrom app.apis import user_detail_api\nurls = {\n    'user/<id>/': user_detail_api,\n}\n# The API function receives the id parameter:\nasync def user_detail_api(request, id):\n    return {'user_id': id}\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I use multiple path variables in a single route?"}, {"role": "assistant", "content": "Define multiple path variables in the URL pattern. They will be passed to your API function in the order they appear in the URL. Example:\n```python\nfrom app.apis import book_chapter_api\nurls = {\n    'book/<book_id>/chapter/<chapter_id>/': book_chapter_api,\n}\n# The API function receives both parameters:\nasync def book_chapter_api(request, book_id, chapter_id):\n    return {'book_id': book_id, 'chapter_id': chapter_id}\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "What types of values can path variables capture in Panther?"}, {"role": "assistant", "content": "Path variables in Panther capture string values from the URL. You can convert them to other types (int, float, etc.) in your API function logic. Panther doesn't enforce type constraints on path variables at the routing level."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I convert path variables to specific data types in Panther?"}, {"role": "assistant", "content": "Convert path variables to specific types in your API function. Example:\n```python\nasync def user_detail_api(request, id):\n    try:\n        user_id = int(id)\n        user = await User.find_one(id=user_id)\n        return user\n    except ValueError:\n        raise NotFoundAPIError('Invalid user ID')\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I validate path variables in Panther?"}, {"role": "assistant", "content": "Validate path variables in your API function logic. Check for valid formats, ranges, or existence in the database. Example:\n```python\nasync def user_detail_api(request, id):\n    if not id.isdigit():\n        raise NotFoundAPIError('Invalid user ID format')\n    user_id = int(id)\n    if user_id <= 0:\n        raise NotFoundAPIError('User ID must be positive')\n    user = await User.find_one(id=user_id)\n    if not user:\n        raise NotFoundAPIError('User not found')\n    return user\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "Can I use path variables with nested routes in Panther?"}, {"role": "assistant", "content": "Yes, you can use path variables in nested routes. The variables will be passed to the appropriate API function based on the route structure. Example:\n```python\nurls = {\n    'user/': {\n        '<id>/': user_detail_api,\n        '<id>/posts/': user_posts_api,\n        '<id>/posts/<post_id>/': user_post_detail_api,\n    }\n}\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I handle optional path variables in Panther?"}, {"role": "assistant", "content": "Panther doesn't support optional path variables in route definitions. Use query parameters for optional data or create multiple routes. Example:\n```python\n# Use query parameters for optional data\nurls = {\n    'user/<id>/': user_detail_api,\n}\n# In your API function:\nasync def user_detail_api(request, id):\n    include_posts = request.query_params.get('include_posts', 'false').lower() == 'true'\n    # Handle optional include_posts parameter\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I create RESTful URLs with path variables in Panther?"}, {"role": "assistant", "content": "Use path variables to create RESTful resource URLs. Example:\n```python\nfrom app.apis import UserListAPI, UserDetailAPI, UserPostsAPI\nurls = {\n    'users/': UserListAPI,           # GET /users/, POST /users/\n    'users/<id>/': UserDetailAPI,    # GET /users/1/, PUT /users/1/, DELETE /users/1/\n    'users/<id>/posts/': UserPostsAPI,  # GET /users/1/posts/\n}\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I handle path variable conflicts in Panther?"}, {"role": "assistant", "content": "Routes are matched in order, so define more specific routes before general ones. Panther will use the first matching route. Example:\n```python\nurls = {\n    'user/admin/': admin_api,        # More specific first\n    'user/<id>/': user_detail_api,   # More general second\n}\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I access path variables in class-based APIs in Panther?"}, {"role": "assistant", "content": "Path variables are passed as parameters to your API methods in class-based APIs. Example:\n```python\nfrom panther.app import GenericAPI\nclass UserAPI(GenericAPI):\n    async def get(self, request, id):\n        user_id = int(id)\n        user = await User.find_one(id=user_id)\n        return user\n    async def put(self, request, id):\n        user_id = int(id)\n        # Update user logic\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I use path variables with Generic APIs in Panther?"}, {"role": "assistant", "content": "Generic APIs like RetrieveAPI, UpdateAPI, and DeleteAPI automatically handle path variables. The variable is typically used as the primary key. Example:\n```python\nfrom panther.generics import RetrieveAPI\nclass UserDetailAPI(RetrieveAPI):\n    model = User\n    # The path variable will be used as the lookup key\nurls = {\n    'user/<id>/': UserDetailAPI,\n}\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I handle path variables with authentication in Panther?"}, {"role": "assistant", "content": "Path variables are available after authentication. You can use them along with the authenticated user information. Example:\n```python\nasync def user_detail_api(request, id):\n    user_id = int(id)\n    # Check if user can access this resource\n    if request.user.id != user_id and not request.user.is_admin:\n        raise AuthorizationAPIError('Access denied')\n    user = await User.find_one(id=user_id)\n    return user\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I debug path variable issues in Panther?"}, {"role": "assistant", "content": "To debug path variable issues, check that variable names match between route definition and API function parameters, verify the order of parameters matches the URL pattern, and ensure proper type conversion and validation in your API function."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I create SEO-friendly URLs with path variables in Panther?"}, {"role": "assistant", "content": "Use descriptive path variables and combine them with slugs or titles. Example:\n```python\nurls = {\n    'blog/<year>/<month>/<slug>/': blog_post_api,\n    'product/<category>/<product_id>/': product_detail_api,\n}\n# URLs like: /blog/2024/01/my-awesome-post/\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I handle path variables with special characters in Panther?"}, {"role": "assistant", "content": "Path variables capture the raw string from the URL. Handle special characters, encoding, or URL-encoded values in your API function logic. Example:\n```python\nimport urllib.parse\nasync def search_api(request, query):\n    decoded_query = urllib.parse.unquote(query)\n    # Process the decoded query\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I create hierarchical path variables in Panther?"}, {"role": "assistant", "content": "Create hierarchical structures by nesting path variables. Example:\n```python\nurls = {\n    'organization/<org_id>/': {\n        'department/<dept_id>/': {\n            'employee/<emp_id>/': employee_detail_api,\n        }\n    }\n}\n# URL: /organization/123/department/456/employee/789/\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I handle path variables with default values in Panther?"}, {"role": "assistant", "content": "Since Panther doesn't support optional path variables, use query parameters or create multiple routes for different scenarios. Example:\n```python\nurls = {\n    'user/<id>/': user_detail_api,\n    'user/': user_list_api,  # Default behavior\n}\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "What is the best practice for naming path variables in Panther?"}, {"role": "assistant", "content": "Use descriptive, lowercase names with underscores for multi-word variables. Be consistent across your application. Use singular nouns for resource identifiers. Examples: user_id, book_title, post_slug, category_name."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I access the request object in Panther APIs?"}, {"role": "assistant", "content": "To access the request object in Panther APIs, you must annotate the request parameter with the Request type. This tells Panther to inject the request object. Example:\n```python\nfrom panther.app import API\nfrom panther.request import Request\n@API()\nasync def my_api(request: Request):\n    # Now you can use the request object\n    return {'method': request.method}\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "What happens if I don't annotate the request parameter with Request?"}, {"role": "assistant", "content": "If you don't annotate the request parameter with Request, Panther will not inject the request object. The parameter will be treated as a regular parameter and will be None or cause an error. Always use `request: Request` annotation when you need access to the request object."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "What information can I access from the request object in Panther?"}, {"role": "assistant", "content": "The request object provides access to:\n- request.method: HTTP method (GET, POST, etc.)\n- request.data: Request body data\n- request.query_params: Query parameters\n- request.headers: Request headers\n- request.user: Authenticated user (if authentication is enabled)\n- request.validated_data: Validated data from input_model\n- request.path: Request path\n- request.url: Full request URL"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I access query parameters in Panther APIs?"}, {"role": "assistant", "content": "Access query parameters through request.query_params. Example:\n```python\nfrom panther.app import API\nfrom panther.request import Request\n@API()\nasync def search_api(request: Request):\n    query = request.query_params.get('q', '')\n    page = int(request.query_params.get('page', 1))\n    limit = int(request.query_params.get('limit', 10))\n    return {'query': query, 'page': page, 'limit': limit}\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I access request headers in Panther APIs?"}, {"role": "assistant", "content": "Access request headers through request.headers. Example:\n```python\nfrom panther.app import API\nfrom panther.request import Request\n@API()\nasync def api_with_headers(request: Request):\n    content_type = request.headers.get('content-type')\n    user_agent = request.headers.get('user-agent')\n    authorization = request.headers.get('authorization')\n    return {'content_type': content_type, 'user_agent': user_agent}\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I access the request body data in Panther APIs?"}, {"role": "assistant", "content": "Access request body data through request.data. Example:\n```python\nfrom panther.app import API\nfrom panther.request import Request\n@API()\nasync def create_user(request: Request):\n    if request.method == 'POST':\n        user_data = request.data\n        # Process the raw request data\n        return {'received_data': user_data}\n    return {'message': 'Use POST method'}\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I access validated data from input_model in Panther APIs?"}, {"role": "assistant", "content": "Access validated data through request.validated_data when using input_model. Example:\n```python\nfrom panther.app import API\nfrom panther.request import Request\nfrom app.serializers import UserSerializer\n@API(input_model=UserSerializer)\nasync def create_user(request: Request):\n    validated_data = request.validated_data\n    # validated_data is already validated and parsed\n    user = await User.insert_one(**validated_data.model_dump())\n    return user\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I access the authenticated user in Panther APIs?"}, {"role": "assistant", "content": "Access the authenticated user through request.user. Example:\n```python\nfrom panther.app import API\nfrom panther.request import Request\nfrom panther.authentications import JWTAuthentication\n@API(auth=JWTAuthentication)\nasync def user_profile(request: Request):\n    user = request.user\n    if user:\n        return {'username': user.username, 'email': user.email}\n    return {'message': 'Not authenticated'}\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I handle different HTTP methods in Panther APIs?"}, {"role": "assistant", "content": "Use request.method to check the HTTP method and handle each case. Example:\n```python\nfrom panther.app import API\nfrom panther.request import Request\n@API(methods=['GET', 'POST', 'PUT', 'DELETE'])\nasync def user_api(request: Request):\n    match request.method:\n        case 'GET':\n            return {'action': 'get users'}\n        case 'POST':\n            return {'action': 'create user'}\n        case 'PUT':\n            return {'action': 'update user'}\n        case 'DELETE':\n            return {'action': 'delete user'}\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I access request path and URL information in Panther APIs?"}, {"role": "assistant", "content": "Access path and URL information through request.path and request.url. Example:\n```python\nfrom panther.app import API\nfrom panther.request import Request\n@API()\nasync def path_info_api(request: Request):\n    path = request.path\n    full_url = request.url\n    return {\n        'path': path,\n        'full_url': full_url,\n        'method': request.method\n    }\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I handle request data validation in Panther APIs?"}, {"role": "assistant", "content": "Use input_model for automatic validation. Panther will validate request.data and provide validated_data. Example:\n```python\nfrom panther.app import API\nfrom panther.request import Request\nfrom app.serializers import UserSerializer\n@API(input_model=UserSerializer)\nasync def create_user(request: Request):\n    try:\n        validated_data = request.validated_data\n        # Data is already validated\n        user = await User.insert_one(**validated_data.model_dump())\n        return user\n    except Exception as e:\n        return {'error': str(e)}\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I access request data without input_model in Panther APIs?"}, {"role": "assistant", "content": "Access raw request data through request.data and handle validation manually. Example:\n```python\nfrom panther.app import API\nfrom panther.request import Request\n@API()\nasync def manual_validation_api(request: Request):\n    if request.method == 'POST':\n        raw_data = request.data\n        # Manual validation logic here\n        if not raw_data.get('username'):\n            return {'error': 'Username is required'}\n        return {'data': raw_data}\n    return {'message': 'Use POST method'}\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I handle file uploads in Panther APIs?"}, {"role": "assistant", "content": "Access file uploads through request.data. Example:\n```python\nfrom panther.app import API\nfrom panther.request import Request\n@API()\nasync def upload_file(request: Request):\n    if request.method == 'POST':\n        file_data = request.data.get('file')\n        if file_data:\n            # Handle file upload logic\n            return {'message': 'File uploaded successfully'}\n        return {'error': 'No file provided'}\n    return {'message': 'Use POST method'}\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I access request cookies in Panther APIs?"}, {"role": "assistant", "content": "Access cookies through request.headers. Example:\n```python\nfrom panther.app import API\nfrom panther.request import Request\n@API()\nasync def cookie_api(request: Request):\n    cookie_header = request.headers.get('cookie', '')\n    # Parse cookie header manually or use a cookie parser\n    return {'cookies': cookie_header}\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I handle request errors in Panther APIs?"}, {"role": "assistant", "content": "Use try-catch blocks to handle request processing errors. Example:\n```python\nfrom panther.app import API\nfrom panther.request import Request\nfrom panther.exceptions import APIError\n@API()\nasync def error_handling_api(request: Request):\n    try:\n        data = request.data\n        # Process data\n        return {'success': True}\n    except ValueError as e:\n        raise APIError('Invalid data format', status_code=400)\n    except Exception as e:\n        raise APIError('Internal server error', status_code=500)\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I access request metadata in Panther APIs?"}, {"role": "assistant", "content": "Access various request metadata through the request object. Example:\n```python\nfrom panther.app import API\nfrom panther.request import Request\n@API()\nasync def metadata_api(request: Request):\n    return {\n        'method': request.method,\n        'path': request.path,\n        'url': request.url,\n        'headers': dict(request.headers),\n        'query_params': dict(request.query_params),\n        'user': request.user.username if request.user else None\n    }\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I use request data with path variables in Panther APIs?"}, {"role": "assistant", "content": "Combine path variables with request data. Example:\n```python\nfrom panther.app import API\nfrom panther.request import Request\n@API()\nasync def user_update_api(request: Request, user_id):\n    if request.method == 'PUT':\n        update_data = request.data\n        # Update user with user_id using update_data\n        return {'user_id': user_id, 'updated_data': update_data}\n    return {'message': 'Use PUT method'}\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "What is the best practice for using the request object in Panther APIs?"}, {"role": "assistant", "content": "Always annotate the request parameter with Request type. Use input_model for automatic validation when possible. Handle different HTTP methods appropriately. Access user information safely (check if request.user exists). Use try-catch blocks for error handling. Keep request processing logic clean and focused."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I create responses in Panther APIs?"}, {"role": "assistant", "content": "In Panther APIs, you can return data directly or use the Response class for more control. Panther automatically wraps your return value in a Response object. Example:\n```python\nfrom panther.app import API\n@API()\nasync def simple_api():\n    return {'message': 'Hello World'}  # Automatically wrapped in Response\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I use the Response class in Panther APIs?"}, {"role": "assistant", "content": "Import and use the Response class for more control over your API responses. Example:\n```python\nfrom panther.app import API\nfrom panther.response import Response\nfrom panther import status\n@API()\nasync def custom_response_api():\n    return Response(\n        data={'message': 'Success'},\n        status_code=status.HTTP_201_CREATED,\n        headers={'X-Custom-Header': 'value'}\n    )\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "What are the parameters of the Response class in Panther?"}, {"role": "assistant", "content": "The Response class accepts these parameters:\n- data: The response data (dict, list, or any serializable object)\n- status_code: HTTP status code (default: 200)\n- headers: Custom response headers (dict)\n- cookies: Response cookies (dict)\nExample:\n```python\nfrom panther.response import Response\nResponse(\n    data={'result': 'success'},\n    status_code=201,\n    headers={'Content-Type': 'application/json'},\n    cookies={'session_id': 'abc123'}\n)\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I set custom status codes in Panther APIs?"}, {"role": "assistant", "content": "Use the Response class with a custom status_code or return a tuple with (data, status_code). Example:\n```python\nfrom panther.app import API\nfrom panther.response import Response\nfrom panther import status\n@API()\nasync def status_code_api():\n    # Method 1: Using Response class\n    return Response(data={'created': True}, status_code=status.HTTP_201_CREATED)\n    # Method 2: Using tuple\n    return {'created': True}, 201\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I add custom headers to Panther API responses?"}, {"role": "assistant", "content": "Use the Response class with the headers parameter. Example:\n```python\nfrom panther.app import API\nfrom panther.response import Response\n@API()\nasync def headers_api():\n    return Response(\n        data={'message': 'Success'},\n        headers={\n            'X-Custom-Header': 'custom-value',\n            'Cache-Control': 'no-cache',\n            'Content-Type': 'application/json'\n        }\n    )\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I set cookies in Panther API responses?"}, {"role": "assistant", "content": "Use the Response class with the cookies parameter. Example:\n```python\nfrom panther.app import API\nfrom panther.response import Response\n@API()\nasync def cookie_api():\n    return Response(\n        data={'message': 'Cookie set'},\n        cookies={\n            'session_id': 'abc123',\n            'user_preference': 'dark_mode'\n        }\n    )\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I handle different response types in Panther APIs?"}, {"role": "assistant", "content": "Return different data types based on your needs. Panther handles serialization automatically. Example:\n```python\nfrom panther.app import API\n@API()\nasync def response_types_api():\n    # Return dict\n    return {'message': 'dict response'}\n    # Return list\n    return [1, 2, 3, 4, 5]\n    # Return string\n    return 'string response'\n    # Return None (204 No Content)\n    return None\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I create error responses in Panther APIs?"}, {"role": "assistant", "content": "Raise Panther exceptions or use Response with error status codes. Example:\n```python\nfrom panther.app import API\nfrom panther.response import Response\nfrom panther.exceptions import NotFoundAPIError, APIError\n@API()\nasync def error_responses_api():\n    # Method 1: Raise exceptions\n    if not found:\n        raise NotFoundAPIError('Resource not found')\n    # Method 2: Use Response with error status\n    return Response(\n        data={'error': 'Custom error message'},\n        status_code=400\n    )\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I return paginated responses in Panther APIs?"}, {"role": "assistant", "content": "Structure your response data to include pagination information. Example:\n```python\nfrom panther.app import API\n@API()\nasync def paginated_api():\n    page = 1\n    limit = 10\n    total = 100\n    data = [{'id': i} for i in range(1, 11)]\n    return {\n        'data': data,\n        'pagination': {\n            'page': page,\n            'limit': limit,\n            'total': total,\n            'pages': (total + limit - 1) // limit\n        }\n    }\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I handle file downloads in Panther APIs?"}, {"role": "assistant", "content": "Use Response with appropriate headers for file downloads. Example:\n```python\nfrom panther.app import API\nfrom panther.response import Response\n@API()\nasync def download_file_api():\n    file_content = b'file content here'\n    return Response(\n        data=file_content,\n        headers={\n            'Content-Type': 'application/octet-stream',\n            'Content-Disposition': 'attachment; filename=\"file.txt\"'\n        }\n    )\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I return JSON responses in Panther APIs?"}, {"role": "assistant", "content": "Panther automatically serializes your response data to JSON. Example:\n```python\nfrom panther.app import API\n@API()\nasync def json_api():\n    return {\n        'status': 'success',\n        'data': {\n            'id': 1,\n            'name': 'John Doe',\n            'email': 'john@example.com'\n        },\n        'timestamp': '2024-01-01T00:00:00Z'\n    }\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I handle conditional responses in Panther APIs?"}, {"role": "assistant", "content": "Return different responses based on conditions. Example:\n```python\nfrom panther.app import API\nfrom panther.response import Response\n@API()\nasync def conditional_api(request: Request):\n    if request.method == 'GET':\n        return {'message': 'GET response'}\n    elif request.method == 'POST':\n        return Response(\n            data={'message': 'POST response'},\n            status_code=201\n        )\n    else:\n        return Response(\n            data={'error': 'Method not allowed'},\n            status_code=405\n        )\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I return empty responses in Panther APIs?"}, {"role": "assistant", "content": "Return None or empty data structures for empty responses. Example:\n```python\nfrom panther.app import API\nfrom panther.response import Response\n@API()\nasync def empty_responses_api():\n    # Method 1: Return None (204 No Content)\n    return None\n    # Method 2: Return empty dict\n    return {}\n    # Method 3: Return empty list\n    return []\n    # Method 4: Use Response with empty data\n    return Response(data={}, status_code=204)\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I handle response serialization in Panther APIs?"}, {"role": "assistant", "content": "Panther automatically handles serialization. Use output_model for structured responses. Example:\n```python\nfrom panther.app import API\nfrom app.serializers import UserSerializer\n@API(output_model=UserSerializer)\nasync def serialized_api():\n    user_data = {\n        'id': 1,\n        'username': 'john_doe',\n        'email': 'john@example.com'\n    }\n    return user_data  # Will be serialized using UserSerializer\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I create streaming responses in Panther APIs?"}, {"role": "assistant", "content": "Return data that can be iterated over for streaming responses. Example:\n```python\nfrom panther.app import API\n@API()\nasync def streaming_api():\n    def generate_data():\n        for i in range(10):\n            yield f'data chunk {i}\\n'\n    return generate_data()\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I handle response caching headers in Panther APIs?"}, {"role": "assistant", "content": "Set cache control headers using the Response class. Example:\n```python\nfrom panther.app import API\nfrom panther.response import Response\n@API()\nasync def cached_api():\n    return Response(\n        data={'data': 'cached content'},\n        headers={\n            'Cache-Control': 'public, max-age=3600',\n            'ETag': 'abc123',\n            'Last-Modified': 'Wed, 01 Jan 2024 00:00:00 GMT'\n        }\n    )\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I return binary data in Panther APIs?"}, {"role": "assistant", "content": "Return bytes or use Response with appropriate content type. Example:\n```python\nfrom panther.app import API\nfrom panther.response import Response\n@API()\nasync def binary_api():\n    binary_data = b'\\x89PNG\\r\\n\\x1a\\n'  # PNG file header\n    return Response(\n        data=binary_data,\n        headers={'Content-Type': 'image/png'}\n    )\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I handle response compression in Panther APIs?"}, {"role": "assistant", "content": "Panther handles compression automatically based on client headers. You can also set compression headers manually. Example:\n```python\nfrom panther.app import API\nfrom panther.response import Response\n@API()\nasync def compressed_api():\n    return Response(\n        data={'large_data': 'x' * 1000},\n        headers={'Content-Encoding': 'gzip'}\n    )\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "What is the best practice for creating responses in Panther APIs?"}, {"role": "assistant", "content": "Use simple return statements for basic responses. Use Response class for custom status codes, headers, or cookies. Use output_model for structured data serialization. Handle errors with appropriate exceptions. Keep response data consistent and well-structured. Use appropriate HTTP status codes for different scenarios."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I use Jinja templates in Panther?"}, {"role": "assistant", "content": "Panther supports Jinja2 templates for rendering HTML responses. You can use TemplateResponse to render templates with context data. First, ensure Jinja2 is installed:\n```bash\npip install jinja2\n```\nThen use TemplateResponse in your APIs:\n```python\nfrom panther.app import API\nfrom panther.response import TemplateResponse\n@API()\nasync def template_api():\n    return TemplateResponse(\n        template_name='index.html',\n        context={'title': 'Welcome', 'users': []}\n    )\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I create a TemplateResponse in Panther?"}, {"role": "assistant", "content": "Import TemplateResponse and use it to render Jinja templates. Example:\n```python\nfrom panther.app import API\nfrom panther.response import TemplateResponse\n@API()\nasync def render_template_api():\n    context = {\n        'title': 'My Website',\n        'message': 'Hello from Panther!',\n        'items': ['item1', 'item2', 'item3']\n    }\n    return TemplateResponse(\n        template_name='page.html',\n        context=context\n    )\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "Where should I place my Jinja templates in a Panther project?"}, {"role": "assistant", "content": "Create a 'templates' directory in your project root or app directory. Panther will look for templates in the 'templates' folder by default. Example structure:\n```\nmy_project/\n├── app/\n│   ├── apis.py\n│   └── templates/\n│       ├── base.html\n│       ├── index.html\n│       └── user/\n│           ├── list.html\n│           └── detail.html\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I create a base template in Panther?"}, {"role": "assistant", "content": "Create a base.html template that other templates can extend. Example:\n```html\n<!-- templates/base.html -->\n<!DOCTYPE html>\n<html>\n<head>\n    <title>{% block title %}{% endblock %}</title>\n    <link rel=\"stylesheet\" href=\"/static/style.css\">\n</head>\n<body>\n    <header>\n        <nav>\n            <a href=\"/\">Home</a>\n            <a href=\"/users\">Users</a>\n        </nav>\n    </header>\n    <main>\n        {% block content %}{% endblock %}\n    </main>\n    <footer>\n        <p>&copy; 2024 My App</p>\n    </footer>\n</body>\n</html>\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I extend a base template in Panther?"}, {"role": "assistant", "content": "Use the extends directive to inherit from a base template. Example:\n```html\n<!-- templates/index.html -->\n{% extends \"base.html\" %}\n\n{% block title %}Home Page{% endblock %}\n\n{% block content %}\n    <h1>Welcome to {{ title }}</h1>\n    <p>{{ message }}</p>\n    <ul>\n    {% for item in items %}\n        <li>{{ item }}</li>\n    {% endfor %}\n    </ul>\n{% endblock %}\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I pass data to Jinja templates in Panther?"}, {"role": "assistant", "content": "Pass data through the context parameter in TemplateResponse. Example:\n```python\nfrom panther.app import API\nfrom panther.response import TemplateResponse\nfrom app.models import User\n@API()\nasync def user_list_api():\n    users = await User.find()\n    return TemplateResponse(\n        template_name='user/list.html',\n        context={\n            'users': users,\n            'title': 'User List',\n            'count': len(users)\n        }\n    )\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I use Jinja template inheritance in Panther?"}, {"role": "assistant", "content": "Create a hierarchy of templates using extends and blocks. Example:\n```html\n<!-- templates/admin/base.html -->\n<!DOCTYPE html>\n<html>\n<head>\n    <title>{% block title %}Admin{% endblock %}</title>\n</head>\n<body>\n    <nav>Admin Navigation</nav>\n    {% block content %}{% endblock %}\n</body>\n</html>\n\n<!-- templates/admin/dashboard.html -->\n{% extends \"admin/base.html\" %}\n{% block title %}Admin Dashboard{% endblock %}\n{% block content %}\n    <h1>Dashboard</h1>\n    <p>Welcome, {{ user.username }}</p>\n{% endblock %}\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I include other templates in Panther?"}, {"role": "assistant", "content": "Use the include directive to include other template files. Example:\n```html\n<!-- templates/user/detail.html -->\n{% extends \"base.html\" %}\n\n{% block content %}\n    <h1>{{ user.username }}</h1>\n    {% include \"user/profile.html\" %}\n    {% include \"user/posts.html\" with context %}\n{% endblock %}\n\n<!-- templates/user/profile.html -->\n<div class=\"profile\">\n    <p>Email: {{ user.email }}</p>\n    <p>Age: {{ user.age }}</p>\n</div>\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I use Jinja macros in Panther templates?"}, {"role": "assistant", "content": "Define and use macros for reusable template components. Example:\n```html\n<!-- templates/macros.html -->\n{% macro render_user_card(user) %}\n    <div class=\"user-card\">\n        <h3>{{ user.username }}</h3>\n        <p>{{ user.email }}</p>\n        <a href=\"/user/{{ user.id }}\">View Profile</a>\n    </div>\n{% endmacro %}\n\n<!-- templates/user/list.html -->\n{% extends \"base.html\" %}\n{% from \"macros.html\" import render_user_card %}\n\n{% block content %}\n    <h1>Users</h1>\n    {% for user in users %}\n        {{ render_user_card(user) }}\n    {% endfor %}\n{% endblock %}\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I handle forms in Jinja templates with Panther?"}, {"role": "assistant", "content": "Create forms in templates and handle them in your APIs. Example:\n```html\n<!-- templates/user/create.html -->\n{% extends \"base.html\" %}\n\n{% block content %}\n    <form method=\"POST\" action=\"/user/create\">\n        <div>\n            <label for=\"username\">Username:</label>\n            <input type=\"text\" id=\"username\" name=\"username\" required>\n        </div>\n        <div>\n            <label for=\"email\">Email:</label>\n            <input type=\"email\" id=\"email\" name=\"email\" required>\n        </div>\n        <button type=\"submit\">Create User</button>\n    </form>\n{% endblock %}\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I use Jinja filters in Panther templates?"}, {"role": "assistant", "content": "Use built-in Jinja filters or create custom ones. Example:\n```html\n<!-- templates/user/list.html -->\n{% extends \"base.html\" %}\n\n{% block content %}\n    <h1>Users ({{ users|length }})</h1>\n    {% for user in users|sort(attribute='username') %}\n        <div>\n            <h3>{{ user.username|title }}</h3>\n            <p>Created: {{ user.created_at|datetime }}</p>\n            <p>Status: {{ user.is_active|yesno('Active', 'Inactive') }}</p>\n        </div>\n    {% endfor %}\n{% endblock %}\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I handle template errors in Panther?"}, {"role": "assistant", "content": "Use try-catch blocks to handle template rendering errors. Example:\n```python\nfrom panther.app import API\nfrom panther.response import TemplateResponse\nfrom panther.exceptions import APIError\n@API()\nasync def safe_template_api():\n    try:\n        return TemplateResponse(\n            template_name='page.html',\n            context={'data': 'some data'}\n        )\n    except Exception as e:\n        # Fallback to JSON response\n        return {'error': 'Template rendering failed', 'message': str(e)}\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I use static files with Jinja templates in Panther?"}, {"role": "assistant", "content": "Reference static files in your templates and serve them from a static directory. Example:\n```html\n<!-- templates/base.html -->\n<!DOCTYPE html>\n<html>\n<head>\n    <title>{% block title %}{% endblock %}</title>\n    <link rel=\"stylesheet\" href=\"/static/css/style.css\">\n    <script src=\"/static/js/app.js\" defer></script>\n</head>\n<body>\n    <img src=\"/static/images/logo.png\" alt=\"Logo\">\n    {% block content %}{% endblock %}\n</body>\n</html>\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I create custom Jinja filters in Panther?"}, {"role": "assistant", "content": "You can extend Jinja's environment with custom filters. Example:\n```python\nfrom panther.app import API\nfrom panther.response import TemplateResponse\nfrom datetime import datetime\n\ndef format_date(value, format='%Y-%m-%d'):\n    if isinstance(value, datetime):\n        return value.strftime(format)\n    return value\n\n# Register custom filter with Jinja environment\n# This would typically be done in your app configuration\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I use conditional rendering in Jinja templates with Panther?"}, {"role": "assistant", "content": "Use if/elif/else statements for conditional rendering. Example:\n```html\n<!-- templates/user/detail.html -->\n{% extends \"base.html\" %}\n\n{% block content %}\n    <h1>{{ user.username }}</h1>\n    \n    {% if user.is_admin %}\n        <div class=\"admin-badge\">Administrator</div>\n    {% endif %}\n    \n    {% if user.posts %}\n        <h2>Posts ({{ user.posts|length }})</h2>\n        {% for post in user.posts %}\n            <div class=\"post\">{{ post.title }}</div>\n        {% endfor %}\n    {% else %}\n        <p>No posts yet.</p>\n    {% endif %}\n    \n    {% if user.is_active and user.email_verified %}\n        <p>Account is fully verified.</p>\n    {% elif user.is_active %}\n        <p>Please verify your email.</p>\n    {% else %}\n        <p>Account is inactive.</p>\n    {% endif %}\n{% endblock %}\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I handle template caching in Panther?"}, {"role": "assistant", "content": "Panther automatically caches compiled templates for performance. In development, templates are reloaded when modified. For production, templates are cached to improve response times."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I create a template with dynamic content in Panther?"}, {"role": "assistant", "content": "Pass dynamic data through context and use Jinja expressions. Example:\n```python\nfrom panther.app import API\nfrom panther.response import TemplateResponse\nfrom app.models import Post\n@API()\nasync def dynamic_content_api(request: Request, category=None):\n    posts = await Post.find(category=category) if category else await Post.find()\n    return TemplateResponse(\n        template_name='blog/list.html',\n        context={\n            'posts': posts,\n            'category': category,\n            'total_posts': len(posts),\n            'current_user': request.user\n        }\n    )\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "What is the best practice for organizing Jinja templates in Panther?"}, {"role": "assistant", "content": "Organize templates by feature or module. Use a clear hierarchy with base templates. Keep templates focused and reusable. Use includes and macros for common components. Follow consistent naming conventions. Separate concerns between templates and business logic."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How does OpenAPI documentation work in Panther?"}, {"role": "assistant", "content": "Panther automatically generates OpenAPI documentation for your APIs. It analyzes your API definitions, input/output models, and source code to create comprehensive API documentation. Panther supports multiple OpenAPI UI types and provides built-in documentation endpoints."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I enable OpenAPI documentation in Panther?"}, {"role": "assistant", "content": "Add OpenAPI URLs to your main URL configuration. Example:\n```python\nfrom panther.openapi.urls import url_routing as openapi_url_routing\nurl_routing = {\n    'docs/': openapi_url_routing,\n}\n```\nThis will provide access to all OpenAPI UI types at /docs/."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "What OpenAPI UI types does Panther support?"}, {"role": "assistant", "content": "Panther supports several OpenAPI UI types:\n- ScalarOpenAPI: Modern, fast OpenAPI UI\n- SwaggerOpenAPI: Classic Swagger UI\n- RedocOpenAPI: Clean, responsive documentation\n- RapiDocOpenAPI: Lightweight, fast UI\n- SpotlightOpenAPI: Modern, feature-rich UI\n\nYou can use them individually or all together via openapi_url_routing."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I use output_schema for OpenAPI documentation in Panther?"}, {"role": "assistant", "content": "Use output_schema to explicitly define response models and status codes for OpenAPI docs. Example:\n```python\nfrom panther import status\nfrom panther.app import API\nfrom panther.openapi import OutputSchema\nfrom app.serializers import UserSerializer\n@API(output_schema=OutputSchema(model=UserSerializer, status_code=status.HTTP_201_CREATED))\nasync def create_user():\n    return user\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I use output_model for OpenAPI documentation in Panther?"}, {"role": "assistant", "content": "Use output_model to specify the response serializer. Panther will use this for OpenAPI docs and response serialization. Example:\n```python\nfrom panther.app import API\nfrom app.serializers import UserSerializer\n@API(output_model=UserSerializer)\nasync def get_user():\n    return user\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How does Panther determine response models and status codes for OpenAPI docs?"}, {"role": "assistant", "content": "Panther follows this priority order:\n1. output_schema: Most accurate, specifies both model and status code\n2. output_model: Specifies serializer, Panther extracts status code from source code\n3. Source Code Analysis: Panther analyzes your code to determine response structure\n\nFor best results, always use output_schema."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I document multiple response types in Panther OpenAPI?"}, {"role": "assistant", "content": "Currently, output_schema documents a single response per API. For multiple responses (e.g., success/error), you may need to extend the OpenAPI docs manually or use different APIs for different scenarios."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I add descriptions to my APIs in OpenAPI docs?"}, {"role": "assistant", "content": "Use docstrings in your API functions to add descriptions. Panther will extract these for OpenAPI documentation. Example:\n```python\n@API()\nasync def get_user(request: Request, user_id: int):\n    \"\"\"\n    Retrieve a user by ID.\n    \n    Returns user information including profile details.\n    \"\"\"\n    return user\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I document path parameters in Panther OpenAPI?"}, {"role": "assistant", "content": "Path parameters are automatically detected from your route patterns and function parameters. Panther will document them in the OpenAPI spec. Example:\n```python\n@API()\nasync def user_detail_api(request: Request, user_id: int):\n    \"\"\"Get user details by ID\"\"\"\n    return user\n# Route: 'user/<user_id>/'\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I document query parameters in Panther OpenAPI?"}, {"role": "assistant", "content": "Query parameters are documented based on your input_model or function parameters. Use Pydantic models with Field descriptions for better documentation. Example:\n```python\nfrom pydantic import BaseModel, Field\nclass UserQueryParams(BaseModel):\n    page: int = Field(1, description=\"Page number\")\n    limit: int = Field(10, description=\"Items per page\")\n    search: str = Field(None, description=\"Search term\")\n\n@API(input_model=UserQueryParams)\nasync def list_users(request: Request):\n    return users\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I document request body in Panther OpenAPI?"}, {"role": "assistant", "content": "Use input_model to document request body. Panther will use this for OpenAPI documentation. Example:\n```python\nfrom panther.app import API\nfrom app.serializers import UserCreateSerializer\n@API(input_model=UserCreateSerializer)\nasync def create_user(request: Request):\n    data = request.validated_data\n    return user\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I add tags to my APIs in OpenAPI docs?"}, {"role": "assistant", "content": "Use the tags parameter in your API decorator to group related endpoints. Example:\n```python\n@API(tags=['users'])\nasync def get_user():\n    return user\n\n@API(tags=['users', 'authentication'])\nasync def create_user():\n    return user\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I add operation IDs to my APIs in OpenAPI docs?"}, {"role": "assistant", "content": "Use the operation_id parameter in your API decorator. Example:\n```python\n@API(operation_id='getUserById')\nasync def get_user(request: Request, user_id: int):\n    return user\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I customize OpenAPI info in Panther?"}, {"role": "assistant", "content": "You can customize OpenAPI metadata by configuring the OpenAPI environment. Example:\n```python\n# In your configs\nOPENAPI_INFO = {\n    'title': 'My API',\n    'version': '1.0.0',\n    'description': 'My awesome API',\n    'contact': {\n        'name': 'API Support',\n        'email': 'support@example.com'\n    }\n}\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I add security schemes to OpenAPI docs in Panther?"}, {"role": "assistant", "content": "Security schemes are automatically documented based on your authentication configuration. Panther will include JWT authentication in the OpenAPI spec when you use JWTAuthentication."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I test APIs using OpenAPI docs in Panther?"}, {"role": "assistant", "content": "OpenAPI UI provides interactive testing capabilities. You can:\n- Try out API endpoints directly from the documentation\n- Set authentication tokens\n- Modify request parameters\n- View response examples\n- Test different HTTP methods\n\nVisit your docs endpoint (e.g., /docs/) to access the interactive interface."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I export OpenAPI specification in Panther?"}, {"role": "assistant", "content": "Access the raw OpenAPI specification at /docs/openapi.json. This provides the complete OpenAPI spec in JSON format that can be imported into other tools or used for code generation."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I handle OpenAPI documentation for WebSockets in Panther?"}, {"role": "assistant", "content": "WebSockets are not typically documented in OpenAPI specs as they use different protocols. OpenAPI is designed for HTTP APIs. For WebSocket documentation, consider using separate documentation or code comments."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I add examples to OpenAPI documentation in Panther?"}, {"role": "assistant", "content": "Use Pydantic Field examples in your serializers. Example:\n```python\nfrom pydantic import BaseModel, Field\nclass UserSerializer(BaseModel):\n    username: str = Field(example=\"john_doe\")\n    email: str = Field(example=\"john@example.com\")\n    age: int = Field(example=25)\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I document error responses in Panther OpenAPI?"}, {"role": "assistant", "content": "Panther automatically documents common error responses (400, 401, 403, 404, 500). For custom error responses, you may need to extend the OpenAPI documentation manually or use output_schema with different status codes."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I customize OpenAPI UI themes in Panther?"}, {"role": "assistant", "content": "Different OpenAPI UI types have different customization options. You can modify the UI appearance by customizing the OpenAPI environment or using different UI types that better match your design requirements."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "What is the best practice for OpenAPI documentation in Panther?"}, {"role": "assistant", "content": "Always use output_schema for precise documentation. Add meaningful descriptions using docstrings. Use tags to organize related endpoints. Provide examples in your serializers. Keep documentation up to date with your API changes. Use consistent naming conventions for operation IDs and tags."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do events work in Panther?"}, {"role": "assistant", "content": "Panther supports two specific events: startup and shutdown. These events allow you to run code when your application starts up or shuts down. You can use these events for initialization tasks, cleanup operations, and resource management."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I use startup events in Panther?"}, {"role": "assistant", "content": "Use the @startup decorator to register functions that run when your application starts. Import it from panther.events and apply it to functions that should execute during startup. Example:\n```python\nfrom panther.events import startup\n@startup\nasync def initialize_database():\n    # Initialize database connection\n    await setup_database()\n    print('Database initialized')\n\n@startup\nasync def load_configuration():\n    # Load application configuration\n    await load_config()\n    print('Configuration loaded')\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I use shutdown events in Panther?"}, {"role": "assistant", "content": "Use the @shutdown decorator to register functions that run when your application shuts down. Import it from panther.events and apply it to functions that should execute during shutdown. Example:\n```python\nfrom panther.events import shutdown\n@shutdown\nasync def cleanup_database():\n    # Close database connections\n    await close_database_connections()\n    print('Database connections closed')\n\n@shutdown\nasync def save_state():\n    # Save application state\n    await save_application_state()\n    print('Application state saved')\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "What should I do in startup events in Panther?"}, {"role": "assistant", "content": "Startup events are perfect for:\n- Initializing database connections\n- Loading configuration files\n- Setting up external service connections\n- Creating application caches\n- Running database migrations\n- Validating environment variables\n- Setting up logging systems\n\nExample:\n```python\nfrom panther.events import startup\n@startup\nasync def app_initialization():\n    # Validate environment\n    validate_env_vars()\n    # Setup database\n    await setup_database()\n    # Load configuration\n    load_app_config()\n    # Initialize cache\n    initialize_cache()\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "What should I do in shutdown events in Panther?"}, {"role": "assistant", "content": "Shutdown events are perfect for:\n- Closing database connections\n- Saving application state\n- Cleaning up temporary files\n- Stopping background tasks\n- Closing external service connections\n- Flushing logs\n- Graceful cleanup of resources\n\nExample:\n```python\nfrom panther.events import shutdown\n@shutdown\nasync def app_cleanup():\n    # Close database connections\n    await close_database()\n    # Save state\n    await save_state()\n    # Cleanup temp files\n    cleanup_temp_files()\n    # Flush logs\n    flush_logs()\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I handle errors in startup/shutdown events in Panther?"}, {"role": "assistant", "content": "Use try-catch blocks in your startup and shutdown functions to handle errors gracefully. Example:\n```python\nfrom panther.events import startup, shutdown\n@startup\nasync def safe_startup():\n    try:\n        await initialize_database()\n        print('Database initialized successfully')\n    except Exception as e:\n        print(f'Failed to initialize database: {e}')\n        # Decide whether to continue or exit\n        raise\n\n@shutdown\nasync def safe_shutdown():\n    try:\n        await cleanup_resources()\n        print('Cleanup completed successfully')\n    except Exception as e:\n        print(f'Error during cleanup: {e}')\n        # Log error but don't prevent shutdown\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "Can I have multiple startup/shutdown events in Panther?"}, {"role": "assistant", "content": "Yes, you can have multiple startup and shutdown events. They will be executed in the order they are defined. Example:\n```python\nfrom panther.events import startup, shutdown\n@startup\nasync def first_startup_task():\n    print('First startup task')\n\n@startup\nasync def second_startup_task():\n    print('Second startup task')\n\n@shutdown\nasync def first_shutdown_task():\n    print('First shutdown task')\n\n@shutdown\nasync def second_shutdown_task():\n    print('Second shutdown task')\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I use startup events for database initialization in Panther?"}, {"role": "assistant", "content": "Use startup events to initialize database connections and run migrations. Example:\n```python\nfrom panther.events import startup\nfrom panther.db import connect\n@startup\nasync def initialize_database():\n    # Connect to database\n    await connect()\n    # Run migrations\n    await run_migrations()\n    # Create indexes\n    await create_indexes()\n    print('Database initialized and ready')\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I use shutdown events for database cleanup in Panther?"}, {"role": "assistant", "content": "Use shutdown events to properly close database connections. Example:\n```python\nfrom panther.events import shutdown\nfrom panther.db import close\n@shutdown\nasync def cleanup_database():\n    # Close database connections\n    await close()\n    print('Database connections closed')\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I use startup events for configuration loading in Panther?"}, {"role": "assistant", "content": "Use startup events to load and validate configuration. Example:\n```python\nfrom panther.events import startup\nimport os\n@startup\nasync def load_configuration():\n    # Load environment variables\n    load_env_vars()\n    # Validate required config\n    validate_config()\n    # Setup logging\n    setup_logging()\n    print('Configuration loaded successfully')\n\ndef validate_config():\n    required_vars = ['DATABASE_URL', 'SECRET_KEY']\n    for var in required_vars:\n        if not os.getenv(var):\n            raise ValueError(f'Missing required environment variable: {var}')\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "What is the best practice for using startup/shutdown events in Panther?"}, {"role": "assistant", "content": "Keep startup/shutdown functions focused and lightweight. Handle errors gracefully. Use startup for initialization and shutdown for cleanup. Don't perform heavy operations that could slow down startup. Log important events. Ensure shutdown events complete quickly to allow graceful application termination."}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I perform CRUD operations in Panther?"}, {"role": "assistant", "content": "Panther provides async CRUD methods for database operations. Example:\n```python\nfrom app.models import User\n\n# Create\nuser = await User.insert_one(username='john', email='john@example.com')\n\n# Read\nusers = await User.find()  # Get all users\nuser = await User.find_one(username='john')  # Get single user\n\n# Update\nawait User.update_one({'username': 'john'}, {'email': 'new@example.com'})\n\n# Delete\nawait User.delete_one({'username': 'john'})\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I use query filters in Panther?"}, {"role": "assistant", "content": "Use dictionaries to specify query filters. Example:\n```python\nfrom app.models import User\n\n# Simple filters\nusers = await User.find({'age': 25})\nusers = await User.find({'is_active': True, 'city': 'New York'})\n\n# Complex filters with operators\nusers = await User.find({\n    'age': {'$gte': 18, '$lte': 65},\n    'email': {'$regex': '@gmail.com'},\n    'created_at': {'$gt': '2024-01-01'}\n})\n\n# OR conditions\nusers = await User.find({\n    '$or': [\n        {'age': {'$lt': 18}},\n        {'age': {'$gt': 65}}\n    ]\n})\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "What query operators does Panther support?"}, {"role": "assistant", "content": "Panther supports MongoDB-style query operators:\n- Comparison: $eq, $ne, $gt, $gte, $lt, $lte\n- Logical: $and, $or, $not, $nor\n- Array: $in, $nin, $all, $elemMatch\n- String: $regex, $options\n- Existence: $exists\n- Type: $type\n\nExample:\n```python\nfrom app.models import Product\n\n# Comparison operators\nproducts = await Product.find({'price': {'$gte': 10, '$lte': 100}})\n\n# Array operators\nproducts = await Product.find({'tags': {'$in': ['electronics', 'gadgets']}})\n\n# String regex\nusers = await User.find({'email': {'$regex': '^admin@', '$options': 'i'}})\n\n# Logical operators\nproducts = await Product.find({\n    '$and': [\n        {'price': {'$gt': 50}},\n        {'category': 'electronics'}\n    ]\n})\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I use aggregation in Panther?"}, {"role": "assistant", "content": "Use the aggregate method for complex data processing. Example:\n```python\nfrom app.models import Order\n\n# Group by category and calculate totals\nresult = await Order.aggregate([\n    {'$group': {\n        '_id': '$category',\n        'total_sales': {'$sum': '$amount'},\n        'count': {'$sum': 1}\n    }},\n    {'$sort': {'total_sales': -1}}\n])\n\n# Match and group\nresult = await Order.aggregate([\n    {'$match': {'status': 'completed'}},\n    {'$group': {\n        '_id': '$user_id',\n        'total_orders': {'$sum': 1},\n        'total_amount': {'$sum': '$amount'}\n    }},\n    {'$sort': {'total_amount': -1}},\n    {'$limit': 10}\n])\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I handle database transactions in Panther?"}, {"role": "assistant", "content": "Use the transaction context manager for atomic operations. Example:\n```python\nfrom panther.db import transaction\nfrom app.models import User, Account\n\nasync def create_user_with_account(user_data, account_data):\n    async with transaction() as txn:\n        # Create user\n        user = await User.insert_one(**user_data, _transaction=txn)\n        \n        # Create account with user reference\n        account = await Account.insert_one(\n            user_id=user.id,\n            **account_data,\n            _transaction=txn\n        )\n        \n        # If any operation fails, both are rolled back\n        return user, account\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I manage database connections in Panther?"}, {"role": "assistant", "content": "Panther automatically manages database connections. Use connect() and close() for manual control. Example:\n```python\nfrom panther.db import connect, close\nfrom panther.events import startup, shutdown\n\n@startup\nasync def initialize_database():\n    await connect()\n    print('Database connected')\n\n@shutdown\nasync def cleanup_database():\n    await close()\n    print('Database disconnected')\n\n# Or manually in your code\nasync def custom_db_operation():\n    await connect()\n    try:\n        # Your database operations\n        pass\n    finally:\n        await close()\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I create custom serializer fields in Panther?"}, {"role": "assistant", "content": "Create custom fields by inheriting from Field or using custom methods. Example:\n```python\nfrom panther.serializer import ModelSerializer, Field\nfrom datetime import datetime\n\nclass UserSerializer(ModelSerializer):\n    class Config:\n        model = User\n        fields = ['id', 'username', 'email', 'age', 'created_at']\n    \n    # Custom field with computed value\n    @Field\n    def display_name(self, obj):\n        return f'{obj.username} ({obj.email})'\n    \n    # Custom field with formatting\n    @Field\n    def formatted_date(self, obj):\n        return obj.created_at.strftime('%Y-%m-%d %H:%M:%S')\n    \n    # Custom field with conditional logic\n    @Field\n    def status(self, obj):\n        if obj.is_active:\n            return 'active'\n        return 'inactive'\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I create nested serializers in Panther?"}, {"role": "assistant", "content": "Use nested serializers for related objects. Example:\n```python\nfrom panther.serializer import ModelSerializer\n\nclass AddressSerializer(ModelSerializer):\n    class Config:\n        model = Address\n        fields = ['street', 'city', 'zipcode']\n\nclass PostSerializer(ModelSerializer):\n    class Config:\n        model = Post\n        fields = ['id', 'title', 'content', 'created_at']\n\nclass UserSerializer(ModelSerializer):\n    class Config:\n        model = User\n        fields = ['id', 'username', 'email', 'address', 'posts']\n    \n    # Nested serializer for address\n    address = AddressSerializer()\n    \n    # Nested serializer for posts (many)\n    posts = PostSerializer(many=True)\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I add validation to serializers in Panther?"}, {"role": "assistant", "content": "Use Pydantic validators and custom validation methods. Example:\n```python\nfrom panther.serializer import ModelSerializer\nfrom pydantic import validator, field_validator\n\nclass UserSerializer(ModelSerializer):\n    class Config:\n        model = User\n        fields = ['username', 'email', 'age', 'password']\n    \n    # Field validation\n    @validator('username')\n    def validate_username(cls, v):\n        if len(v) < 3:\n            raise ValueError('Username must be at least 3 characters')\n        if not v.isalnum():\n            raise ValueError('Username must be alphanumeric')\n        return v\n    \n    @validator('email')\n    def validate_email(cls, v):\n        if '@' not in v:\n            raise ValueError('Invalid email format')\n        return v.lower()\n    \n    @validator('age')\n    def validate_age(cls, v):\n        if v < 0 or v > 150:\n            raise ValueError('Age must be between 0 and 150')\n        return v\n    \n    # Custom validation method\n    def validate(self, data):\n        if data.get('username') == data.get('password'):\n            raise ValueError('Username and password cannot be the same')\n        return data\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I create read-only and write-only fields in Panther serializers?"}, {"role": "assistant", "content": "Use read_only and write_only parameters in Field decorators. Example:\n```python\nfrom panther.serializer import ModelSerializer, Field\n\nclass UserSerializer(ModelSerializer):\n    class Config:\n        model = User\n        fields = ['id', 'username', 'email', 'password', 'created_at']\n    \n    # Read-only field (only in responses)\n    @Field(read_only=True)\n    def id(self, obj):\n        return obj.id\n    \n    # Write-only field (only in requests)\n    @Field(write_only=True)\n    def password(self, obj):\n        return obj.password if hasattr(obj, 'password') else None\n    \n    # Read-only computed field\n    @Field(read_only=True)\n    def created_at(self, obj):\n        return obj.created_at.strftime('%Y-%m-%d %H:%M:%S')\n    \n    # Conditional field\n    @Field(read_only=True)\n    def is_admin(self, obj):\n        return getattr(obj, 'is_admin', False)\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I test Panther APIs?"}, {"role": "assistant", "content": "Use pytest with async support for testing Panther APIs. Example:\n```python\nimport pytest\nfrom panther.test import TestClient\nfrom main import app\nfrom app.models import User\n\n@pytest.fixture\nasync def client():\n    async with TestClient(app) as client:\n        yield client\n\n@pytest.fixture\nasync def test_user():\n    user = await User.insert_one(\n        username='testuser',\n        email='test@example.com'\n    )\n    yield user\n    await User.delete_one({'id': user.id})\n\nasync def test_create_user(client):\n    response = await client.post('/user/', json={\n        'username': 'newuser',\n        'email': 'new@example.com'\n    })\n    assert response.status_code == 201\n    data = response.json()\n    assert data['username'] == 'newuser'\n\nasync def test_get_user(client, test_user):\n    response = await client.get(f'/user/{test_user.id}/')\n    assert response.status_code == 200\n    data = response.json()\n    assert data['username'] == 'testuser'\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I test WebSockets in Panther?"}, {"role": "assistant", "content": "Use TestClient for WebSocket testing. Example:\n```python\nimport pytest\nfrom panther.test import TestClient\nfrom main import app\n\n@pytest.fixture\nasync def client():\n    async with TestClient(app) as client:\n        yield client\n\nasync def test_websocket_connection(client):\n    with client.websocket_connect('/ws/echo/') as websocket:\n        # Send message\n        websocket.send_text('Hello')\n        \n        # Receive response\n        response = websocket.receive_text()\n        assert response == 'Hello'\n\nasync def test_websocket_with_auth(client):\n    # First authenticate\n    auth_response = await client.post('/auth/login/', json={\n        'username': 'testuser',\n        'password': 'password'\n    })\n    token = auth_response.json()['access_token']\n    \n    # Connect with authentication\n    with client.websocket_connect(\n        f'/ws/chat/?authorization={token}'\n    ) as websocket:\n        websocket.send_json({'type': 'message', 'text': 'Hello'})\n        response = websocket.receive_json()\n        assert response['type'] == 'message'\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I create test fixtures in Panther?"}, {"role": "assistant", "content": "Use pytest fixtures for test data setup and cleanup. Example:\n```python\nimport pytest\nfrom app.models import User, Post, Category\n\n@pytest.fixture\nasync def test_user():\n    user = await User.insert_one(\n        username='testuser',\n        email='test@example.com',\n        is_active=True\n    )\n    yield user\n    await User.delete_one({'id': user.id})\n\n@pytest.fixture\nasync def test_category():\n    category = await Category.insert_one(\n        name='Technology',\n        slug='technology'\n    )\n    yield category\n    await Category.delete_one({'id': category.id})\n\n@pytest.fixture\nasync def test_post(test_user, test_category):\n    post = await Post.insert_one(\n        title='Test Post',\n        content='Test content',\n        author_id=test_user.id,\n        category_id=test_category.id\n    )\n    yield post\n    await Post.delete_one({'id': post.id})\n\n@pytest.fixture\nasync def auth_headers(test_user):\n    # Create authentication token\n    token = create_test_token(test_user)\n    return {'Authorization': f'Bearer {token}'}\n\nasync def test_post_creation(client, test_user, test_category, auth_headers):\n    response = await client.post('/post/', \n        json={\n            'title': 'New Post',\n            'content': 'New content',\n            'category_id': test_category.id\n        },\n        headers=auth_headers\n    )\n    assert response.status_code == 201\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I set up environment-specific configurations in Panther?"}, {"role": "assistant", "content": "Create configuration variables as normal variables in your configs file. Example:\n```python\n# core/configs.py\nimport os\nfrom datetime import timedelta\n\n# Development settings\nDEBUG = True\nLOG_QUERIES = True\nALLOW_ORIGINS = ['*']\nCACHE = None  # Disable caching in development\n\n# Production settings (override based on environment)\nif os.getenv('ENVIRONMENT') == 'production':\n    DEBUG = False\n    LOG_QUERIES = False\n    ALLOW_ORIGINS = [\n        'https://yourdomain.com',\n        'https://app.yourdomain.com'\n    ]\n    CACHE = timedelta(minutes=30)\n    THROTTLING = Throttle(rate=100, duration=timedelta(minutes=1))\n\n# Database settings\nDATABASE_URL = os.getenv('DATABASE_URL', 'mongodb://localhost:27017')\nDATABASE_NAME = os.getenv('DATABASE_NAME', 'panther_db')\n\n# Security settings\nSECRET_KEY = os.getenv('SECRET_KEY', 'your-secret-key')\nJWT_ALGORITHM = 'HS256'\nJWT_LIFE_TIME = timedelta(days=1)\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I access configuration variables in Panther?"}, {"role": "assistant", "content": "Access configuration variables using panther.configs.config. Example:\n```python\nfrom panther.configs import config\n\n# Access configuration variables\ndebug_mode = config.DEBUG\nsecret_key = config.SECRET_KEY\ndatabase_url = config.DATABASE_URL\n\n# Use in your APIs\n@API()\nasync def debug_info():\n    if config.DEBUG:\n        return {'debug': True, 'environment': 'development'}\n    return {'debug': False}\n\n# Use in middleware\nclass ConfigMiddleware(HTTPMiddleware):\n    async def __call__(self, request):\n        if config.LOG_QUERIES:\n            # Log database queries\n            pass\n        \n        response = await self.dispatch(request=request)\n        return response\n\n# Use in models\nclass User(Model):\n    username: str = Field(index=True)\n    \n    async def save(self):\n        if config.DEBUG:\n            print(f'Saving user: {self.username}')\n        return await super().save()\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I validate configuration in Panther?"}, {"role": "assistant", "content": "Add validation logic directly in your configs.py file. Example:\n```python\n# core/configs.py\nimport os\nfrom datetime import timedelta\n\n# Configuration variables\nSECRET_KEY = os.getenv('SECRET_KEY')\nDATABASE_URL = os.getenv('DATABASE_URL')\nALLOW_ORIGINS = os.getenv('ALLOW_ORIGINS', '*').split(',')\nDEBUG = os.getenv('DEBUG', 'False').lower() == 'true'\n\n# Validation functions\ndef validate_config():\n    errors = []\n    \n    # Validate SECRET_KEY\n    if not SECRET_KEY or len(SECRET_KEY) < 32:\n        errors.append('SECRET_KEY must be at least 32 characters')\n    \n    # Validate DATABASE_URL\n    if not DATABASE_URL:\n        errors.append('DATABASE_URL is required')\n    elif not DATABASE_URL.startswith(('mongodb://', 'mongodb+srv://')):\n        errors.append('Invalid DATABASE_URL format')\n    \n    # Validate ALLOW_ORIGINS\n    if '*' in ALLOW_ORIGINS and len(ALLOW_ORIGINS) > 1:\n        errors.append('Cannot use * with specific origins')\n    \n    if errors:\n        raise ValueError(f'Configuration errors: {\\n'.join(errors)}')\n\n# Run validation on import\nvalidate_config()\n\n# Additional computed values\nCACHE_DURATION = timedelta(minutes=30) if not DEBUG else None\nTHROTTLING_RATE = 100 if not DEBUG else 1000\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I manage secrets in Panther?"}, {"role": "assistant", "content": "Store secrets as environment variables and access them through configs. Example:\n```python\n# core/configs.py\nimport os\nfrom cryptography.fernet import Fernet\n\n# Basic secret management\nSECRET_KEY = os.getenv('SECRET_KEY')\nDATABASE_URL = os.getenv('DATABASE_URL')\n\n# API keys\nSTRIPE_SECRET_KEY = os.getenv('STRIPE_SECRET_KEY')\nSENDGRID_API_KEY = os.getenv('SENDGRID_API_KEY')\nAWS_SECRET_KEY = os.getenv('AWS_SECRET_KEY')\n\n# Encrypted secrets (for production)\nENCRYPTION_KEY = os.getenv('ENCRYPTION_KEY')\n\n# Helper functions for encrypted secrets\ndef decrypt_secret(encrypted_secret: str) -> str:\n    if not ENCRYPTION_KEY:\n        return encrypted_secret\n    \n    f = Fernet(ENCRYPTION_KEY.encode())\n    return f.decrypt(encrypted_secret.encode()).decode()\n\n# Use encrypted secrets in production\nif os.getenv('ENVIRONMENT') == 'production':\n    ENCRYPTED_DB_PASSWORD = os.getenv('ENCRYPTED_DB_PASSWORD')\n    if ENCRYPTED_DB_PASSWORD:\n        DATABASE_PASSWORD = decrypt_secret(ENCRYPTED_DB_PASSWORD)\n        # Update DATABASE_URL with decrypted password\n        DATABASE_URL = DATABASE_URL.replace('PASSWORD_PLACEHOLDER', DATABASE_PASSWORD)\n\n# Access in your code\nfrom panther.configs import config\n\n@API()\nasync def payment_api():\n    stripe_key = config.STRIPE_SECRET_KEY\n    # Use stripe_key for payment processing\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I optimize performance in Panther?"}, {"role": "assistant", "content": "Use caching, database optimization, and async patterns. Example:\n```python\n# 1. Enable caching for frequently accessed data\n@API(cache=timedelta(minutes=10))\nasync def get_popular_posts():\n    return await Post.find().sort('views', -1).limit(10)\n\n# 2. Use database indexes\nclass Post(Model):\n    title: str = Field(index=True)\n    author_id: str = Field(index=True)\n    created_at: datetime = Field(index=True)\n\n# 3. Optimize queries with projection\nasync def get_user_list():\n    # Only fetch needed fields\n    users = await User.find(\n        {'is_active': True},\n        projection={'username': 1, 'email': 1, '_id': 0}\n    )\n    return users\n\n# 4. Use background tasks for heavy operations\nfrom panther.background_tasks import BackgroundTask\n\n@API()\nasync def create_report():\n    # Start background task\n    BackgroundTask(generate_report).submit()\n    return {'message': 'Report generation started'}\n\n# 5. Implement connection pooling\nDATABASE_CONFIG = {\n    'max_pool_size': 10,\n    'min_pool_size': 2,\n    'max_idle_time': 30000\n}\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I implement monitoring and logging in Panther?"}, {"role": "assistant", "content": "Use built-in logging and custom monitoring. Example:\n```python\nimport logging\nfrom panther.middlewares import HTTPMiddleware\nfrom datetime import datetime\nimport time\n\n# Configure logging\nlogging.basicConfig(\n    level=logging.INFO,\n    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',\n    handlers=[\n        logging.FileHandler('app.log'),\n        logging.StreamHandler()\n    ]\n)\n\nlogger = logging.getLogger(__name__)\n\n# Custom middleware for monitoring\nclass MonitoringMiddleware(HTTPMiddleware):\n    async def __call__(self, request):\n        start_time = time.time()\n        \n        # Log request\n        logger.info(f'Request: {request.method} {request.path}')\n        \n        try:\n            response = await self.dispatch(request=request)\n            \n            # Log response\n            duration = time.time() - start_time\n            logger.info(f'Response: {response.status_code} - {duration:.3f}s')\n            \n            return response\n        except Exception as e:\n            # Log errors\n            logger.error(f'Error: {str(e)}')\n            raise\n\n# Custom monitoring in APIs\n@API()\nasync def monitored_api(request: Request):\n    logger.info(f'API called by user: {request.user.username if request.user else \"anonymous\"}')\n    \n    # Track performance\n    start_time = time.time()\n    result = await heavy_operation()\n    duration = time.time() - start_time\n    \n    logger.info(f'Heavy operation completed in {duration:.3f}s')\n    return result\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I implement security best practices in Panther?"}, {"role": "assistant", "content": "Use input validation, authentication, and security headers. Example:\n```python\nfrom panther.app import API\nfrom panther.request import Request\nfrom panther.response import Response\nimport re\n\n# 1. Input sanitization\n@API()\nasync def secure_api(request: Request):\n    user_input = request.data.get('comment', '')\n    \n    # Sanitize HTML\n    sanitized = re.sub(r'<[^>]*>', '', user_input)\n    \n    # Validate length\n    if len(sanitized) > 1000:\n        raise ValueError('Comment too long')\n    \n    return {'comment': sanitized}\n\n# 2. Rate limiting for sensitive endpoints\n@API(throttling=Throttle(rate=5, duration=timedelta(minutes=1)))\nasync def login_api(request: Request):\n    # Login logic\n    pass\n\n# 3. Security headers middleware\nclass SecurityHeadersMiddleware(HTTPMiddleware):\n    async def __call__(self, request):\n        response = await self.dispatch(request=request)\n        \n        # Add security headers\n        response.headers.update({\n            'X-Content-Type-Options': 'nosniff',\n            'X-Frame-Options': 'DENY',\n            'X-XSS-Protection': '1; mode=block',\n            'Strict-Transport-Security': 'max-age=31536000; includeSubDomains',\n            'Content-Security-Policy': \"default-src 'self'\"\n        })\n        \n        return response\n\n# 4. SQL injection prevention (automatic with Panther)\n@API()\nasync def safe_query(request: Request):\n    # Panther automatically prevents SQL injection\n    user_id = request.query_params.get('user_id')\n    user = await User.find_one({'id': user_id})\n    return user\n\n# 5. XSS protection\n@API()\nasync def safe_output(request: Request):\n    user_data = request.data\n    \n    # Escape output\n    safe_data = {\n        'username': html.escape(user_data.get('username', '')),\n        'email': user_data.get('email', '')\n    }\n    \n    return safe_data\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I create custom database backends in Panther?"}, {"role": "assistant", "content": "Implement custom database backends by extending Panther's database interface. Example:\n```python\nfrom panther.db import BaseDatabase\nfrom typing import Dict, List, Any\n\nclass CustomDatabase(BaseDatabase):\n    def __init__(self, connection_string: str):\n        self.connection_string = connection_string\n        self.connection = None\n    \n    async def connect(self):\n        # Initialize your custom database connection\n        self.connection = await create_connection(self.connection_string)\n    \n    async def disconnect(self):\n        if self.connection:\n            await self.connection.close()\n    \n    async def insert_one(self, collection: str, data: Dict) -> Dict:\n        # Custom insert implementation\n        result = await self.connection.execute(\n            f'INSERT INTO {collection} VALUES (:data)',\n            {'data': json.dumps(data)}\n        )\n        return {'id': result.lastrowid, **data}\n    \n    async def find(self, collection: str, filter_dict: Dict = None) -> List[Dict]:\n        # Custom find implementation\n        query = f'SELECT * FROM {collection}'\n        if filter_dict:\n            where_clause = self._build_where_clause(filter_dict)\n            query += f' WHERE {where_clause}'\n        \n        results = await self.connection.fetch(query)\n        return [json.loads(row['data']) for row in results]\n    \n    def _build_where_clause(self, filter_dict: Dict) -> str:\n        # Convert Panther filters to SQL\n        conditions = []\n        for key, value in filter_dict.items():\n            if isinstance(value, dict):\n                # Handle operators like $gt, $lt\n                for op, val in value.items():\n                    if op == '$gt':\n                        conditions.append(f\"JSON_EXTRACT(data, '$.{key}') > {val}\")\n                    elif op == '$lt':\n                        conditions.append(f\"JSON_EXTRACT(data, '$.{key}') < {val}\")\n            else:\n                conditions.append(f\"JSON_EXTRACT(data, '$.{key}') = '{value}'\")\n        \n        return ' AND '.join(conditions)\n\n# Use custom database\nDATABASE = CustomDatabase('sqlite:///custom.db')\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I create custom validators in Panther?"}, {"role": "assistant", "content": "Create custom validators for complex validation logic. Example:\n```python\nfrom pydantic import validator, ValidationError\nimport re\n\n# Custom validators\nclass CustomValidators:\n    @staticmethod\n    def validate_phone_number(phone: str) -> str:\n        # Remove all non-digit characters\n        digits = re.sub(r'\\D', '', phone)\n        \n        if len(digits) < 10 or len(digits) > 15:\n            raise ValueError('Invalid phone number length')\n        \n        return digits\n    \n    @staticmethod\n    def validate_password_strength(password: str) -> str:\n        if len(password) < 8:\n            raise ValueError('Password must be at least 8 characters')\n        \n        if not re.search(r'[A-Z]', password):\n            raise ValueError('Password must contain uppercase letter')\n        \n        if not re.search(r'[a-z]', password):\n            raise ValueError('Password must contain lowercase letter')\n        \n        if not re.search(r'\\d', password):\n            raise ValueError('Password must contain number')\n        \n        if not re.search(r'[!@#$%^&*]', password):\n            raise ValueError('Password must contain special character')\n        \n        return password\n    \n    @staticmethod\n    def validate_username_availability(username: str, existing_users: list) -> str:\n        if username in existing_users:\n            raise ValueError('Username already taken')\n        return username\n\n# Use in serializers\nclass UserSerializer(ModelSerializer):\n    class Config:\n        model = User\n        fields = ['username', 'email', 'phone', 'password']\n    \n    @validator('phone')\n    def validate_phone(cls, v):\n        return CustomValidators.validate_phone_number(v)\n    \n    @validator('password')\n    def validate_password(cls, v):\n        return CustomValidators.validate_password_strength(v)\n    \n    @validator('username')\n    def validate_username(cls, v):\n        # Get existing usernames\n        existing_users = [user.username for user in User.find()]\n        return CustomValidators.validate_username_availability(v, existing_users)\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "How do I implement advanced routing patterns in Panther?"}, {"role": "assistant", "content": "Use dynamic routing and custom route handlers. Example:\n```python\n# 1. Dynamic route generation\nfrom panther.app import API\nfrom panther.request import Request\n\n# Generate routes dynamically\ndef create_dynamic_routes():\n    routes = {}\n    \n    # Create CRUD routes for each model\n    models = [User, Post, Category]\n    \n    for model in models:\n        model_name = model.__name__.lower()\n        \n        # List route\n        routes[f'{model_name}/'] = create_list_api(model)\n        \n        # Detail route\n        routes[f'{model_name}/<id>/'] = create_detail_api(model)\n        \n        # Custom routes\n        if hasattr(model, 'custom_routes'):\n            for route_path, handler in model.custom_routes.items():\n                routes[f'{model_name}/{route_path}'] = handler\n    \n    return routes\n\n# 2. Custom route handlers\n@API()\nasync def create_list_api(model_class):\n    async def list_handler(request: Request):\n        items = await model_class.find()\n        return items\n    return list_handler\n\n@API()\nasync def create_detail_api(model_class):\n    async def detail_handler(request: Request, id: str):\n        item = await model_class.find_one({'id': id})\n        if not item:\n            raise NotFoundAPIError(f'{model_class.__name__} not found')\n        return item\n    return detail_handler\n\n# 3. Route middleware\nclass RouteMiddleware(HTTPMiddleware):\n    async def __call__(self, request):\n        # Add route information to request\n        request.route_info = {\n            'path': request.path,\n            'method': request.method,\n            'timestamp': datetime.now()\n        }\n        \n        response = await self.dispatch(request=request)\n        return response\n\n# 4. Conditional routing\nurls = {\n    'api/v1/': v1_urls if settings.API_VERSION == 'v1' else v2_urls,\n    'api/v2/': v2_urls,\n    'admin/': admin_urls if settings.ENABLE_ADMIN else None,\n}\n\n# 5. Route aliases with different handlers\nurls = {\n    'user/': user_api,\n    'users/': user_api,  # Alias\n    'u/': user_api,      # Short alias\n    'profile/': user_profile_api,  # Different handler for same data\n}\n```"}]}
{"messages": [{"role": "system", "content": "You are learning a new Python backend framework called Panther. I will teach you each component step by step."}, {"role": "user", "content": "What are the best practices for Panther development?"}, {"role": "assistant", "content": "Follow these best practices for Panther development:\n\n1. **Project Structure**:\n   - Organize by feature, not by type\n   - Use consistent naming conventions\n   - Separate concerns (models, APIs, serializers)\n\n2. **Database Design**:\n   - Use proper indexes for frequently queried fields\n   - Implement soft deletes for important data\n   - Use transactions for related operations\n   - Optimize queries with projections\n\n3. **API Design**:\n   - Use RESTful conventions\n   - Implement proper error handling\n   - Use appropriate HTTP status codes\n   - Add comprehensive validation\n   - Document with OpenAPI\n\n4. **Security**:\n   - Always validate and sanitize input\n   - Use authentication and authorization\n   - Implement rate limiting\n   - Add security headers\n   - Keep dependencies updated\n\n5. **Performance**:\n   - Use caching for expensive operations\n   - Implement pagination for large datasets\n   - Use background tasks for heavy operations\n   - Monitor and log performance metrics\n\n6. **Testing**:\n   - Write unit tests for all APIs\n   - Use fixtures for test data\n   - Test error scenarios\n   - Implement integration tests\n\n7. **Configuration**:\n   - Use environment-specific configs\n   - Validate configuration on startup\n   - Secure sensitive data\n   - Use feature flags for gradual rollouts\n\n8. **Code Quality**:\n   - Use type hints consistently\n   - Follow PEP 8 style guidelines\n   - Add docstrings to complex functions\n   - Use meaningful variable names\n   - Keep functions focused and small\n\n9. **Monitoring**:\n   - Implement comprehensive logging\n   - Monitor application health\n   - Track performance metrics\n   - Set up error alerting\n\n10. **Deployment**:\n    - Use containerization (Docker)\n    - Implement CI/CD pipelines\n    - Use environment variables for config\n    - Set up proper backup strategies\n    - Monitor production performance"}]}
